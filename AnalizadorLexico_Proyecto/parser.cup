package comp;

import java_cup.runtime.*;

parser code
{:

public void syntax_error( Symbol s ){
	System.out.println("ERROR SINTACTICO. Linea: " + s.left+", columna: " + s.right );
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception{
	System.out.println("ERROR SINTACTICO. El sistema no se pudo recuperar, linea");
}

:}

action code
{:
	Programa programa=new Programa();
	int tipo;
	int funcion=-1;
	
	public void buscar_id(String id,int func,int linea){
		int aux=programa.buscarID(id,func);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no ha sido declarado");
		}else{
			tipo=aux;
		}
	}
	
	public void buscar_v(String id,int tamano,int linea){
		int aux=programa.buscar_vectores(id);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El arreglo \""+id+"\" no ha sido declarado");
		}else{
			DeclaracionVector vect_aux=programa.vectores.get(aux);
			tipo=vect_aux.tipo;			
			if(vect_aux.tamano<=tamano){
				System.out.println("ERROR en linea:"+linea+". Se ha excedido el tamano del arreglo \""+id+"\".");
			}
		}
	}
	
	
:}


/*los terminales que aun no se usan*/
terminal CARACT_ESP;

terminal PAR_AB,PAR_CER,LLAV_AB,LLAV_CER,COR_AB,COR_CER ;
terminal IGUAL, OP_UNARIO, OP_BINARIO,OP_COMP,OP_COMP_L;
terminal CARACTER,ENTERO,FLOTANTE,CADENA,BOOLEANO;
terminal IF,ELSE,THEN,WHILE,DO;
terminal INPUT,OUTPUT,RETURN;


/*Desde cero*/
terminal String ID;
terminal COMA,DOSPUN,END;
terminal int CHAR,INT,FLOAT,STRING,BOOL,VOID;

non terminal PROGRAMA, DECLARACIONES, FUNCIONES;
non terminal TIPO,DEC_G,DEC_G1,DEC_V,DEC_V1;
non terminal FUNCION,FUNC,ENCAB,ENCAB1;
non terminal BLOQUE,DEC_L,DEC_L1,DEC_L2,COMANDOS,COMANDOS1;
non terminal ATRIBUCIONES,ATRIBUCIONES1;
non terminal EXPRESION,E,F,VAL;


PROGRAMA ::= DECLARACIONES FUNCIONES;

/*----DECLARACIONES GLOBALES----*/

DECLARACIONES::= DECLARACIONES DEC_G|DEC_G|DECLARACIONES DEC_V|DEC_V|error;

/*variables globales*/
DEC_G::= TIPO DOSPUN DEC_G1;
DEC_G1::= ID:r END {:programa.insertar_vglobales(tipo, r, rleft);:}
		| ID:r COMA DEC_G1 {:programa.insertar_vglobales(tipo, r, rleft);:} ; 
		
/*vectores*/		
DEC_V::= TIPO DOSPUN DEC_V1;
DEC_V1::= ID:r1 COR_AB ENTERO:r2 COR_CER END {:  programa.insertar_vectores(tipo,r1,(int) r2,r1left); :}
		| ID:r1 COR_AB ENTERO:r2 COR_CER COMA DEC_V1 {:  programa.insertar_vectores(tipo,r1,(int) r2,r1left); :};

/*tipos*/		
TIPO ::= INT:r {: tipo=r; :} 
		| FLOAT:r {: tipo=r;:}  
		| CHAR:r {: tipo=r;:} 
		| BOOL:r {: tipo=r;:}  
		| STRING:r {: tipo=r;:};
				
		
/*----FUNCIONES----*/
FUNCIONES::= FUNCIONES FUNCION|FUNCION|error;

FUNCION::=FUNC BLOQUE;
/*Declaracion de funcion*/
FUNC::= TIPO DOSPUN ID:r {:programa.funciones.add(new Funcion(tipo, r)); funcion++; :} PAR_AB ENCAB
	|	VOID DOSPUN ID:r {:programa.funciones.add(new Funcion(sym.VOID, r)); funcion++; :} PAR_AB ENCAB;

/*Encabezado*/
ENCAB ::= PAR_CER
		| TIPO DOSPUN ID:r {: programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);:}  ENCAB1 PAR_CER  ;		
ENCAB1::= COMA TIPO DOSPUN ID:r {: programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);:} ENCAB1 |;


/*--BLOQUE--*/

BLOQUE::= LLAV_AB DEC_L COMANDOS LLAV_CER|error;

/*Declaracion variables locales*/
DEC_L::=DEC_L DEC_L1|DEC_L1|error;
DEC_L1::= TIPO DOSPUN DEC_L2;
DEC_L2::= ID:r END {: programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft); :}
		| ID:r COMA DEC_L2 {:programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft);:} ;

/*PROGRAMACION QUE SE USARA EN EL BLOQUE*/		
COMANDOS ::= COMANDOS ATRIBUCIONES|ATRIBUCIONES|error;

/*Para las atribuciones*/
ATRIBUCIONES::= ID:r {: buscar_id(r,funcion,rleft);:} ATRIBUCIONES1
				|ID:r1 COR_AB ENTERO:r2 COR_CER {: buscar_v(r1,(int)r2,r1left); :} ATRIBUCIONES1;

ATRIBUCIONES1 ::= OP_UNARIO END
				| IGUAL EXPRESION END;

/*Expresiones matematicas*/
EXPRESION ::= ID:r OP_UNARIO {:  :}
			|E;
 E ::= E OP_BINARIO F|F;
 F ::= PAR_AB E PAR_CER| ID|ENTERO;

/*Valores*/
