
package comp;

import java_cup.runtime.*;

parser code
{:

public void syntax_error( Symbol s ){
	System.out.println("Error de Sintaxis:"+"En linea " + s.left+" y columna " + s.right );
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception{
	
}

:}

action code
{:
:}

/*los terminales que aun no se usan*/
terminal CARACT_ESP,CARACTER,ENTERO,FLOTANTE,KEYWORD,STRING,BOOL;


terminal String TIPO,ID,END,COMA,DOSPUN ;
terminal PAR_AB,PAR_CER,LLAV_AB,LLAV_CER,COR_AB,COR_CER ;
terminal IGUAL, OP_UNARIO, OP_BINARIO,OP_COMP;
terminal IF,ELSE,THEN,WHILE,DO;

non terminal expr,EXP,exprvec,expr_list,decl_var,decl_vec,decl_fun,ENCAB,BLOQUE; 
non terminal LISTA,LISTAV,VECT;
non terminal COMANDOS,COMANDO_S,ATRIBUCIONES,ATRIBUCIONES1,EXPRESION;
non terminal E,F;
non terminal C_FLUJO_IF,C_FLUJO_ELSE,C_FLUJO_WHILE,C_FLUJO_DOWHILE,EXPR_F;

 
expr_list ::=   expr_list decl_var| decl_var |expr_list decl_vec| decl_vec
				|expr_list decl_fun| decl_fun |error;
                 
/*Declaracion de variables globales*/   
   	decl_var ::=   expr END;
   
   	expr ::= TIPO DOSPUN LISTA {: System.out.println("declaracion ok "); :};
	LISTA ::= LISTA COMA ID
         | ID;
   
/*Declaracion de vectores globales*/   
   	
   	decl_vec ::=   exprvec END; 
   	
   	exprvec ::= TIPO DOSPUN LISTAV {: System.out.println("declaracion globalV ok"); :};
	LISTAV ::= LISTAV COMA VECT|VECT;
	VECT ::= ID COR_AB COR_CER;
 
 /*Declaracion de funciones*/
 
 decl_fun ::= ENCAB BLOQUE;
 
 ENCAB ::= TIPO DOSPUN ID PAR_AB EXP PAR_CER ;
 EXP ::= EXP COMA TIPO DOSPUN ID|TIPO DOSPUN ID| ;
 
 /*CUERPO ::= LLAV_AB DECL_LOC BLOQUE LLAV_CER|LLAV_AB BLOQUE LLAV_CER|LLAV_AB LLAV_CER;
 DECL_LOC ::= DECL_LOC decl_var | decl_var  ;*/
 
 /*Declaracion de Bloque*/   
 
 BLOQUE ::= LLAV_AB COMANDOS LLAV_CER|LLAV_AB LLAV_CER;
  
/*Declaracion de Comandos Simple*/ 
 
 COMANDOS ::= COMANDOS COMANDO_S|COMANDO_S;
 COMANDO_S ::=	decl_var
 				|ATRIBUCIONES
 				|C_FLUJO_IF
 				|C_FLUJO_WHILE
 				|C_FLUJO_DOWHILE;  			 				
 
 /*Declaraciones de Atribuciones */
 
 ATRIBUCIONES ::= ID ATRIBUCIONES1| ID COR_AB ENTERO COR_CER ATRIBUCIONES1;
 ATRIBUCIONES1 ::=IGUAL EXPRESION END {: System.out.println("atribucion ok"); :};
 
 /*Declaracion de Expresiones*/
  
 EXPRESION ::= ID OP_UNARIO|E;
   
 E ::= E OP_BINARIO F|F;
 F ::= PAR_AB E PAR_CER|ID|ENTERO;
	
/*Comandos de control de flujo*/
	/*C_FLUJOS ::= C_FLUJOS C_FLUJO_IF|C_FLUJOS C_FLUJO_DOWHILE|C_FLUJOS C_FLUJO_WHILE|C_FLUJO_IF|C_FLUJO_DOWHILE|C_FLUJO_WHILE;*/
		
	C_FLUJO_IF ::= IF PAR_AB EXPR_F PAR_CER THEN BLOQUE C_FLUJO_ELSE ;
	C_FLUJO_ELSE ::= ELSE BLOQUE {: System.out.println("Control if else ok"); :} | {: System.out.println("Control if ok"); :};
	
	C_FLUJO_DOWHILE ::= DO BLOQUE WHILE PAR_AB EXPR_F PAR_CER END {: System.out.println("Control DO WHILE ok"); :};
	C_FLUJO_WHILE ::= WHILE PAR_AB EXPR_F PAR_CER DO BLOQUE {: System.out.println("Control WHILE ok"); :};
	
	EXPR_F ::= ID OP_COMP ID;
	

