package comp;

import java_cup.runtime.*;

parser code
{:
int errores=0;

public void syntax_error( Symbol s ){
	System.out.println("ERROR SINTACTICO. Linea: " + s.left+", columna: " + s.right );
	errores++;
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception{
	System.out.println("ERROR SINTACTICO. El sistema no se pudo recuperar, linea");
	errores++;
}

:}

action code
{:
	Programa programa=new Programa();
	int tipo,valor,param,errores=0;
	int funcion=-1;	
	Funcion func_b;	
	
	/*Buscamos algun vector*/
	public void buscar_id(String id,int func,int linea){
		int aux= programa.buscarID(id,func);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no ha sido declarado");
			errores++;					
		}
		tipo=aux;
	}
	/*Buscamos algun vector*/
	public void buscar_v(String id,int tamano,int linea){
		int aux=programa.buscar_vectores(id);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El arreglo \""+id+"\" no ha sido declarado");
			errores++;
		}else{
			DeclaracionVector vect_aux=programa.vectores.get(aux);
			tipo=vect_aux.tipo;			
			if(vect_aux.tamano<=tamano){
				System.out.println("ERROR en linea:"+linea+". Se ha excedido el tamano del arreglo \""+id+"\".");
				errores++;
			}
		}
	}
	
	/*Insertaremos una funcion cuando no se repita su id*/
	public void insertar_funciones(String id,int linea){
		if(programa.buscar_funcion(id)==-1){
			programa.funciones.add(new Funcion(tipo, id));
			funcion++;
		}else{
			System.out.println("ERROR en linea:"+linea+". La funcion \""+id+"()\" ya ha sido declarada antes");
			errores++;
		}
		
		
	}
	/*Buscamos si existe un ID cuando se hacen atribuciones. Comprobamos la induccion y la inferencia */
	public void buscar_id_atrib(String id,int func,int linea){
		int aux= programa.buscarID(id,func);			
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no ha sido declarado");
			errores++;
		}else{			
			if(tipo==sym.INT||tipo==sym.FLOAT||tipo==sym.BOOL){				
				if(aux==sym.STRING){
					System.out.println("ERROR en linea:"+linea+", identificador \""+id+"\". No hay induccion para variables de tipo String.");
					errores++;
				}else{
					if(aux==sym.CHAR){					
						System.out.println("ERROR en linea:"+linea+", identificador \""+id+"\". No hay induccion para variables de tipo char.");
						errores++;						
					}
				}
			}else{
				if(tipo==sym.STRING){
					if(aux!=sym.STRING){
						System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no es de tipo String.");
						errores++;
					}
				}else{
					if(aux!=sym.CHAR){
						System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no es de tipo char.");
						errores++;
					}
				}
			}
		}
	}
	
	/*Verificamos si algun dato coincide con su tipo*/
	public void verificar_valor(int linea, int columna){
		switch(valor){
		case sym.INT:
			if(tipo!=sym.INT){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo int es incompatible con el tipo de variable del identificador.");
				errores++;
			}
		break;
		case sym.FLOAT:
			if(tipo!=sym.FLOAT){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo float es incompatible con el tipo de variable del identificador.");
				errores++;
			}
		break;
		case sym.BOOL:
			if(tipo!=sym.BOOL){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo bool es incompatible con el tipo de variable del identificador.");
				errores++;
			}
		break;
		case sym.CHAR:
			if(tipo!=sym.CHAR){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo char es incompatible con el tipo de variable del identificador.");
				errores++;
			}
		break;
		case sym.STRING:
			if(tipo!=sym.STRING){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo String es incompatible con el tipo de variable del identificador.");	
				errores++;
			}
		break;
		
		}
	}
	/*Verificamos si una funcion es void*/
	public void verif_funcion1(int ind,int linea){
		if(programa.funciones.get(ind).var_param.isEmpty()){
			System.out.println("ERROR. en linea:"+linea+". La funcion es de tipo void y no debe retornar nada.");
			errores++;
		}
	}
	/*Verificamos si una funcion es de cualquier tipo*/
	public void verif_funcion2(int ind){
		Funcion aux=programa.funciones.get(ind);
		if(aux.tipo!=sym.VOID){			
			System.out.println("ERROR. La funcion "+aux.id+ "() debe retornar un tipo de valor");
			errores++;
		}
	}
	
	/*Buscamos si existe una funcion*/
	public void buscar_func(String id,int linea){
		int aux=programa.buscar_funcion(id);
		if(aux==-1){			
			System.out.println("ERROR en linea:"+linea+". La funcion \""+id+"()\" no existe.");
			errores++;
			func_b=null;
		}else{
			func_b=programa.funciones.get(aux);
			param=0;
		}	
	}
	
	/*Vemos si la funcion vacia que llamamos tiene parametros*/
	public void llamar1(int linea){
		 if(func_b!=null){
			 if(func_b.var_param.size()!=param){
				 System.out.println("ERROR. En linea: "+linea+". La funcion \""+func_b.id+"()\" recibe parametros.");
				 errores++;
			 }
		 }
	 }	
	 
	/*Meotodo para ver si coinciden los parametros con los ids de una funcion buscada*/
	public void llamar2(String id,int linea){
		 if(func_b!=null){
			 if(param==func_b.var_param.size()){
				 System.out.println("ERROR. En linea: "+linea+". La funcion \""+func_b.id+"()\" no recibe tantos parametros");
				 errores++;
			 }else{
				 buscar_id(id,funcion,linea);
				 if(tipo!=func_b.var_param.get(param).tipo){
					 System.out.println("ERROR. En linea: "+linea+". El identificador \""+id+"\" no corresponde al mismo tipo que recibe la funcion");
					 errores++;
				 }
				 param++;
			 }
		 }
	 }

	public void llamar3(int linea){
		if(func_b!=null){
			 if(param==func_b.var_param.size()){
				 System.out.println("ERROR. En linea: "+linea+". La funcion \""+func_b.id+"()\" no recibe tantos parametros");
				 errores++;
			 }else{				 
				 if(valor!=func_b.var_param.get(param).tipo){
					 System.out.println("ERROR. En linea: "+linea+". El tipo de dato en el parametro "+(param+1)+" no corresponde al mismo que recibe la funcion.");
					 errores++;
				 }
				 param++;
			 }
		}
			
	}
	
	 
	
:}


/*los terminales que aun no se usan*/
terminal CARACT_ESP;

terminal PAR_AB,PAR_CER,LLAV_AB,LLAV_CER,COR_AB,COR_CER ;
terminal IGUAL, OP_COMP,OP_COMP_L;
terminal OP_UNARIO_MAS,OP_UNARIO_MENOS,MAS,MENOS,POR,DIV;
terminal CARACTER,ENTERO,FLOTANTE,CADENA,BOOLEANO;
terminal IF,ELSE,THEN,WHILE,DO;
terminal INPUT,OUTPUT,RETURN;


/*Desde cero*/
terminal String ID;
terminal COMA,DOSPUN,END;
terminal int CHAR,INT,FLOAT,STRING,BOOL,VOID;

non terminal PROGRAMA, DECLARACIONES, FUNCIONES;
non terminal TIPO,DEC_G,DEC_G1,DEC_V,DEC_V1;
non terminal FUNCION,FUNC,ENCAB,ENCAB1;
non terminal BLOQUE,BLOQUE1,DEC_L,DEC_L1,DEC_L2,COMANDOS,COMANDOS1;
non terminal ATRIBUCIONES,ATRIBUCIONES1;
non terminal EXPRESION,E,E1,VAL;
non terminal OPR_IN,OPR_OUT,OPR_RTN,OPR_RTN1;
non terminal C_FLUJO_IF,C_FLUJO_ELSE,C_FLUJO_WHILE,C_FLUJO_DOWHILE;
non terminal EXPR_F,EXPR_F1,COMP,COMP1,COMP2;
non terminal LLAM_F,LLAM_F1;
non terminal OP_UNARIO,OP_BINARIO;

PROGRAMA ::= DECLARACIONES FUNCIONES;

/*----DECLARACIONES GLOBALES----*/

DECLARACIONES::= DECLARACIONES DEC_G|DEC_G|DECLARACIONES DEC_V|DEC_V|error END;

/*variables globales*/
DEC_G::= TIPO DOSPUN DEC_G1;
DEC_G1::= ID:r END {:programa.insertar_vglobales(tipo, r, rleft);:}
		| ID:r COMA DEC_G1 {:programa.insertar_vglobales(tipo, r, rleft);:} ; 
		
/*vectores*/		
DEC_V::= TIPO DOSPUN DEC_V1;
DEC_V1::= ID:r1 COR_AB ENTERO:r2 COR_CER END {:  programa.insertar_vectores(tipo,r1,(int) r2,r1left);:}
		| ID:r1 COR_AB ENTERO:r2 COR_CER COMA DEC_V1 {:  programa.insertar_vectores(tipo,r1,(int) r2,r1left); :};

/*tipos*/		
TIPO ::= INT:r {: tipo=r; :} 
		| FLOAT:r {: tipo=r;:}  
		| CHAR:r {: tipo=r;:} 
		| BOOL:r {: tipo=r;:}  
		| STRING:r {: tipo=r;:};
				
		
/*----FUNCIONES----*/
FUNCIONES::= FUNCIONES FUNCION|FUNCION|error;

FUNCION::=FUNC BLOQUE;
/*Declaracion de funcion*/
FUNC::= TIPO DOSPUN ID:r {: insertar_funciones(r,rleft);:} PAR_AB ENCAB
	|	VOID DOSPUN ID:r {:tipo=sym.VOID; insertar_funciones(r,rleft); :} PAR_AB ENCAB;

/*Encabezado*/
ENCAB ::= PAR_CER 
		| TIPO DOSPUN ID:r {: programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);:}  ENCAB1 PAR_CER ;		
ENCAB1::= COMA TIPO DOSPUN ID:r {: programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);:} ENCAB1 |;


/*--BLOQUE--*/

BLOQUE::= LLAV_AB DEC_L COMANDOS OPR_RTN LLAV_CER | BLOQUE1;
BLOQUE1::= LLAV_AB COMANDOS LLAV_CER |LLAV_AB LLAV_CER;

/*Declaracion variables locales*/
DEC_L::=DEC_L DEC_L1|DEC_L1;
DEC_L1::= TIPO DOSPUN DEC_L2;
DEC_L2::= ID:r END {: programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft); :}
		| ID:r COMA DEC_L2 {:programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft);:} ;

/*PROGRAMACION QUE SE USARA EN EL BLOQUE*/		
COMANDOS ::= COMANDOS COMANDOS1|COMANDOS1;
COMANDOS1 ::= ATRIBUCIONES
			| OPR_IN
 			| OPR_OUT
 			| C_FLUJO_IF
 			| C_FLUJO_WHILE
 			| C_FLUJO_DOWHILE
			| LLAM_F
 			| error END
 			| error LLAV_CER; 		 

/*Para las atribuciones*/
ATRIBUCIONES::= ID:r {: buscar_id(r,funcion,rleft); :} ATRIBUCIONES1
				|ID:r1 COR_AB ENTERO:r2 COR_CER {: buscar_v(r1,(int)r2,r1left); :} ATRIBUCIONES1;

ATRIBUCIONES1 ::= OP_UNARIO END
				| IGUAL EXPRESION END;

/*Expresiones matematicas*/
EXPRESION ::= ID:r OP_UNARIO {: if(tipo!=-1){buscar_id_atrib(r,funcion,rleft);} :}
			|E;
			
 E ::= ID:r {: if(tipo!=-1){ buscar_id_atrib(r,funcion,rleft); } :}
	| ID:r {: if(tipo!=-1){ buscar_id_atrib(r,funcion,rleft); } :} OP_BINARIO E1
	| VAL:r {: verificar_valor(rleft,rright); :}
	| VAL:r {: verificar_valor(rleft,rright); :} OP_BINARIO ID:r1 {: if(tipo!=-1){ buscar_id_atrib(r1,funcion,r1left); } :} ;

 E1::= ID:r {: if(tipo!=-1){buscar_id_atrib(r,funcion,rleft);} :}
	| VAL:r {: verificar_valor(rleft,rright); :} ;
 
 OP_UNARIO::=OP_UNARIO_MAS
 			|OP_UNARIO_MENOS;
 			
 
 OP_BINARIO::=POR|DIV|MAS|MENOS;
			

/*Valores*/

VAL::=CADENA {: valor=sym.STRING; :}
	| ENTERO {: valor=sym.INT; :}
	| FLOTANTE {: valor=sym.FLOAT; :}
	| CARACTER {: valor=sym.CHAR; :}
	| BOOLEANO {: valor=sym.BOOL; :} ;

/*Operaciones de entrada y salida*/
OPR_IN ::= INPUT ID:r END {: buscar_id(r,funcion,rleft); :};
OPR_OUT ::= OUTPUT CADENA END;
OPR_RTN ::= RETURN:r OPR_RTN1 {:verif_funcion1(funcion,rleft);:}/*Verificamos si el valor de retorno corresponda con el tipo de funcion */
		|  {:verif_funcion2(funcion);:};/*Verificamos si la funcion es void y no retorne nada*/
OPR_RTN1 ::=ID:r END {: buscar_id(r,funcion,rleft);
						if(tipo!=programa.funciones.get(funcion).tipo){
							System.out.println("ERROR. En linea:"+rleft+". La variable que se quiere retornar es de diferente tipo al de la funcion"); 
							errores++;
						} 
					 :}
		   |VAL:r END {:
						if(valor!=programa.funciones.get(funcion).tipo){
							System.out.println("ERROR. En linea:"+rleft+". El dato que se quiere retornar es de diferente tipo al de la funcion"); 
							errores++;
						}
					:};

/*Comandos de control de flujo*/			
	C_FLUJO_IF ::= IF PAR_AB EXPR_F PAR_CER THEN BLOQUE1 C_FLUJO_ELSE ;
	C_FLUJO_ELSE ::= ELSE BLOQUE1|;
	
	C_FLUJO_DOWHILE ::= DO BLOQUE1 WHILE PAR_AB EXPR_F PAR_CER END;
	C_FLUJO_WHILE ::= WHILE PAR_AB EXPR_F PAR_CER DO BLOQUE1;

/*Declaracion de Expresiones para Operaciones logicas*/
EXPR_F ::= EXPR_F1|ID;
EXPR_F1 ::= EXPR_F1 OP_COMP_L COMP|COMP;
COMP ::= COMP1 OP_COMP:r COMP2{: if(tipo!=valor){System.out.println("ERROR. en linea"+rleft+". Variables de tipo incompatible");errores++;} :};
COMP1::= ID:r {: buscar_id(r,funcion,rleft); :}
		|VAL {: tipo=valor; :};		
COMP2::= ID:r{:
			int aux=programa.buscarID(r,funcion);
			if(aux==-1){
				System.out.println("ERROR en linea:"+rleft+". El identificador \""+r+"\" no ha sido declarado");
				errores++;
			}else{
				valor=aux;
			}
		:}
		|VAL;

/*LLamada a funciones*/
 LLAM_F ::= ID:r PAR_AB {: buscar_func(r,rleft); :} LLAM_F1 PAR_CER END {: param=0; :} 
 		|	ID:r PAR_AB PAR_CER END {: buscar_func(r,rleft);llamar1(rleft);:} ; /*verificamos si la funcion que vamos a llamar no tiene parametros*/
		
		/*verificamos si los tipos de identificadores corresponden a lo que recibe la funcion*/
 LLAM_F1::= ID:r {: llamar2(r,rleft); :}
		|	ID:r COMA {: llamar2(r,rleft); :} LLAM_F1
		/*verificamos si el tipo de datos corresponden a lo que recibe la funcion*/
		|	VAL:r {: llamar3(rleft); :}
		|	VAL:r COMA {: llamar3(rleft); :} LLAM_F1;