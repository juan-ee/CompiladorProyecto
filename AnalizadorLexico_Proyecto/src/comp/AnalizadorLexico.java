/* The following code was generated by JFlex 1.4.3 on 20/12/15 22:18 */

/*Analizador Lexico*/
/*Integrantes: Juan Erazo, Luis Unapanta*/

package comp;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/12/15 22:18 from the specification file
 * <tt>D:/Documents/Github/AnalizadorLexico_Proyecto/AnalizadorLexico_Proyecto/lexer.lex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\35\2\0\1\56\22\0\1\33\1\21\1\34\1\0"+
    "\1\23\1\0\1\22\1\32\1\50\1\51\1\37\1\40\1\46\1\26"+
    "\1\30\1\36\12\27\1\47\1\45\1\21\1\41\1\21\2\0\22\25"+
    "\1\16\7\25\1\54\1\0\1\55\1\0\1\25\1\0\1\13\1\20"+
    "\1\14\1\44\1\10\1\11\1\17\1\15\1\1\2\24\1\12\1\24"+
    "\1\2\1\6\1\3\1\24\1\7\1\31\1\5\1\4\1\24\1\43"+
    "\3\24\1\52\1\42\1\53\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\10\2\1\1\1\2\3\3\1\4\1\5"+
    "\1\1\1\6\1\1\3\4\1\7\1\1\2\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\1\21\10\2\1\0\1\2\1\22\1\23\3\0"+
    "\1\6\1\0\1\2\1\24\1\2\1\25\10\2\1\0"+
    "\1\2\1\26\1\27\1\30\1\0\2\2\1\31\1\32"+
    "\1\2\1\33\1\2\1\0\1\2\1\34\1\2\1\0"+
    "\1\35\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\57\0\u0292"+
    "\0\u02c1\0\u02f0\0\57\0\u031f\0\u034e\0\57\0\u037d\0\u0234"+
    "\0\u03ac\0\u03db\0\u040a\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\u0439\0\215\0\u0468\0\u0497"+
    "\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f"+
    "\0\57\0\57\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\215\0\u0758\0\215\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u063e\0\57\0\u069c"+
    "\0\u095d\0\u098c\0\u09bb\0\215\0\215\0\u09ea\0\215\0\u0a19"+
    "\0\u0a48\0\u0a77\0\215\0\u0aa6\0\u0ad5\0\215\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\4\1\12\1\4\1\13\1\4\1\14\1\15\1\16"+
    "\1\17\1\4\1\2\1\20\1\21\1\2\1\4\1\22"+
    "\1\23\1\24\1\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\23\60\0\1\4\1\45\6\4"+
    "\1\46\7\4\3\0\2\4\1\0\1\4\1\0\1\4"+
    "\11\0\2\4\13\0\20\4\3\0\2\4\1\0\1\4"+
    "\1\0\1\4\11\0\2\4\13\0\6\4\1\47\5\4"+
    "\1\50\3\4\3\0\2\4\1\0\1\4\1\0\1\4"+
    "\11\0\2\4\13\0\3\4\1\51\14\4\3\0\2\4"+
    "\1\0\1\4\1\0\1\4\11\0\2\4\13\0\7\4"+
    "\1\52\10\4\3\0\2\4\1\0\1\4\1\0\1\4"+
    "\11\0\2\4\13\0\11\4\1\53\6\4\3\0\2\4"+
    "\1\0\1\4\1\0\1\4\11\0\2\4\13\0\11\4"+
    "\1\54\1\55\5\4\3\0\2\4\1\0\1\4\1\0"+
    "\1\4\11\0\2\4\13\0\14\4\1\56\3\4\3\0"+
    "\2\4\1\0\1\4\1\0\1\4\11\0\2\4\17\0"+
    "\1\57\52\0\5\4\1\60\12\4\3\0\2\4\1\0"+
    "\1\4\1\0\1\4\11\0\2\4\53\0\1\61\37\0"+
    "\1\61\62\0\1\62\1\21\56\0\1\21\1\63\26\0"+
    "\33\64\1\0\1\64\1\0\21\64\35\65\1\0\21\65"+
    "\36\0\1\66\1\67\57\0\1\62\60\0\1\61\15\0"+
    "\14\4\1\70\3\4\3\0\2\4\1\0\1\4\1\0"+
    "\1\4\11\0\2\4\13\0\5\4\1\71\12\4\3\0"+
    "\2\4\1\0\1\4\1\0\1\4\11\0\2\4\13\0"+
    "\2\4\1\72\1\4\1\73\13\4\3\0\2\4\1\0"+
    "\1\4\1\0\1\4\11\0\2\4\13\0\3\4\1\74"+
    "\14\4\3\0\2\4\1\0\1\4\1\0\1\4\11\0"+
    "\2\4\13\0\7\4\1\75\10\4\3\0\2\4\1\0"+
    "\1\4\1\0\1\4\11\0\2\4\13\0\4\4\1\76"+
    "\13\4\3\0\2\4\1\0\1\4\1\0\1\4\11\0"+
    "\2\4\13\0\4\4\1\77\13\4\3\0\2\4\1\0"+
    "\1\4\1\0\1\4\11\0\2\4\13\0\20\4\3\0"+
    "\2\4\1\0\1\4\1\0\1\100\11\0\2\4\13\0"+
    "\5\4\1\101\12\4\3\0\2\4\1\0\1\4\1\0"+
    "\1\4\11\0\2\4\13\0\11\4\1\102\6\4\3\0"+
    "\2\4\1\0\1\4\1\0\1\4\11\0\2\4\13\0"+
    "\12\4\1\103\5\4\3\0\2\4\1\0\1\4\1\0"+
    "\1\4\11\0\2\4\21\0\1\104\50\0\5\4\1\105"+
    "\12\4\3\0\2\4\1\0\1\4\1\0\1\4\11\0"+
    "\2\4\41\0\1\106\61\0\1\107\24\0\34\65\1\110"+
    "\1\0\21\65\35\66\1\0\21\66\36\67\1\0\1\111"+
    "\17\67\1\0\1\112\17\4\3\0\2\4\1\0\1\4"+
    "\1\0\1\4\11\0\2\4\13\0\3\4\1\113\14\4"+
    "\3\0\2\4\1\0\1\4\1\0\1\4\11\0\2\4"+
    "\13\0\7\4\1\114\10\4\3\0\2\4\1\0\1\4"+
    "\1\0\1\4\11\0\2\4\13\0\1\4\1\115\16\4"+
    "\3\0\2\4\1\0\1\4\1\0\1\4\11\0\2\4"+
    "\13\0\2\4\1\72\15\4\3\0\2\4\1\0\1\4"+
    "\1\0\1\4\11\0\2\4\13\0\3\4\1\116\14\4"+
    "\3\0\2\4\1\0\1\4\1\0\1\4\11\0\2\4"+
    "\13\0\7\4\1\117\10\4\3\0\2\4\1\0\1\4"+
    "\1\0\1\4\11\0\2\4\13\0\12\4\1\120\5\4"+
    "\3\0\2\4\1\0\1\4\1\0\1\4\11\0\2\4"+
    "\13\0\20\4\3\0\2\4\1\0\1\4\1\0\1\74"+
    "\11\0\2\4\13\0\6\4\1\73\11\4\3\0\2\4"+
    "\1\0\1\4\1\0\1\4\11\0\2\4\13\0\1\121"+
    "\56\0\11\4\1\73\6\4\3\0\2\4\1\0\1\4"+
    "\1\0\1\4\11\0\2\4\50\0\1\23\21\0\11\4"+
    "\1\122\6\4\3\0\2\4\1\0\1\4\1\0\1\4"+
    "\11\0\2\4\13\0\4\4\1\123\13\4\3\0\2\4"+
    "\1\0\1\4\1\0\1\4\11\0\2\4\13\0\6\4"+
    "\1\124\11\4\3\0\2\4\1\0\1\4\1\0\1\4"+
    "\11\0\2\4\13\0\4\4\1\73\13\4\3\0\2\4"+
    "\1\0\1\4\1\0\1\4\11\0\2\4\14\0\1\125"+
    "\55\0\7\4\1\126\10\4\3\0\2\4\1\0\1\4"+
    "\1\0\1\4\11\0\2\4\13\0\1\4\1\123\16\4"+
    "\3\0\2\4\1\0\1\4\1\0\1\4\11\0\2\4"+
    "\31\0\1\127\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2820];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\3\1\1\11\2\1\1\11"+
    "\5\1\11\11\12\1\1\0\1\1\2\11\3\0\1\1"+
    "\1\0\14\1\1\0\2\1\1\11\1\1\1\0\7\1"+
    "\1\0\3\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return new Symbol( sym.PAR_CER,yyline+1,yycolumn+1);
          }
        case 30: break;
        case 3: 
          { return new Symbol( sym.CARACT_ESP, yyline + 1 , yycolumn + 1  );
          }
        case 31: break;
        case 21: 
          { return new Symbol( sym.TIPO,yyline+1,yycolumn+1) ;
          }
        case 32: break;
        case 25: 
          { return new Symbol( sym.BOOL, yyline + 1 , yycolumn + 1  );
          }
        case 33: break;
        case 9: 
          { return new Symbol( sym.COMA,yyline+1,yycolumn+1) ;
          }
        case 34: break;
        case 8: 
          { return new Symbol( sym.END,yyline+1,yycolumn+1) ;
          }
        case 35: break;
        case 15: 
          { return new Symbol( sym.COR_AB,yyline+1,yycolumn+1);
          }
        case 36: break;
        case 13: 
          { return new Symbol( sym.LLAV_AB,yyline+1,yycolumn+1);
          }
        case 37: break;
        case 22: 
          { return new Symbol( sym.FLOTANTE, yyline + 1 , yycolumn + 1  );
          }
        case 38: break;
        case 16: 
          { return new Symbol( sym.COR_CER,yyline+1,yycolumn+1);
          }
        case 39: break;
        case 2: 
          { return new Symbol( sym.ID,yyline+1,yycolumn+1) ;
          }
        case 40: break;
        case 24: 
          { return new Symbol( sym.STRING, yyline + 1 , yycolumn + 1  );
          }
        case 41: break;
        case 14: 
          { return new Symbol( sym.LLAV_CER,yyline+1,yycolumn+1);
          }
        case 42: break;
        case 1: 
          { System.out.println("ERROR: Token no identificado --> "+yytext()+" en la linea: "+
									(yyline+1)+", columna: "+(yycolumn+1));
          }
        case 43: break;
        case 28: 
          { return new Symbol( sym.KEYWORD, yyline + 1 , yycolumn + 1  ) ;
          }
        case 44: break;
        case 4: 
          { return new Symbol( sym.OP_BINARIO , yyline + 1 , yycolumn + 1  ) ;
          }
        case 45: break;
        case 18: 
          { return new Symbol( sym.OP_COMP , yyline + 1 , yycolumn + 1  ) ;
          }
        case 46: break;
        case 29: 
          { return new Symbol( sym.WHILE,yyline+1,yycolumn+1);
          }
        case 47: break;
        case 23: 
          { return new Symbol( sym.CARACTER, yyline + 1 , yycolumn + 1  );
          }
        case 48: break;
        case 10: 
          { return new Symbol( sym.DOSPUN,yyline+1,yycolumn+1) ;
          }
        case 49: break;
        case 7: 
          { return new Symbol( sym.IGUAL , yyline + 1 , yycolumn + 1  ) ;
          }
        case 50: break;
        case 5: 
          { return new Symbol( sym.ENTERO, yyline + 1 , yycolumn + 1  );
          }
        case 51: break;
        case 20: 
          { return new Symbol( sym.DO,yyline+1,yycolumn+1);
          }
        case 52: break;
        case 11: 
          { return new Symbol( sym.PAR_AB,yyline+1,yycolumn+1);
          }
        case 53: break;
        case 26: 
          { return new Symbol( sym.THEN,yyline+1,yycolumn+1);
          }
        case 54: break;
        case 27: 
          { return new Symbol( sym.ELSE,yyline+1,yycolumn+1);
          }
        case 55: break;
        case 19: 
          { return new Symbol( sym.OP_UNARIO , yyline + 1 , yycolumn + 1  ) ;
          }
        case 56: break;
        case 17: 
          { return new Symbol( sym.IF,yyline+1,yycolumn+1);
          }
        case 57: break;
        case 6: 
          { 
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
