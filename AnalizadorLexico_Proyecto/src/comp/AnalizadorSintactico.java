
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 21 10:20:35 GMT-05:00 2015
//----------------------------------------------------

package comp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 21 10:20:35 GMT-05:00 2015
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\005\004\000\002\002\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\004\000" +
    "\002\002\005\000\002\013\005\000\002\013\003\000\002" +
    "\007\004\000\002\004\005\000\002\014\005\000\002\014" +
    "\003\000\002\015\005\000\002\010\004\000\002\011\010" +
    "\000\002\003\007\000\002\003\005\000\002\003\002\000" +
    "\002\012\005\000\002\012\004\000\002\016\004\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\020\004\000\002\020\007\000\002" +
    "\021\005\000\002\035\005\000\002\036\005\000\002\037" +
    "\005\000\002\040\007\000\002\040\006\000\002\041\005" +
    "\000\002\041\003\000\002\022\004\000\002\022\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\024\003\000\002\025\011\000\002\026" +
    "\004\000\002\026\002\000\002\030\011\000\002\027\010" +
    "\000\002\031\003\000\002\031\003\000\002\032\005\000" +
    "\002\032\003\000\002\033\005\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\003\011\005\010\001\002\000\006\002" +
    "\uffff\005\uffff\001\002\000\006\002\204\005\010\001\002" +
    "\000\006\002\ufffd\005\ufffd\001\002\000\004\007\201\001" +
    "\002\000\004\011\156\001\002\000\006\002\ufffa\005\ufffa" +
    "\001\002\000\004\014\017\001\002\000\006\002\ufffb\005" +
    "\ufffb\001\002\000\004\007\015\001\002\000\030\002\ufff9" +
    "\003\ufff9\005\ufff9\006\ufff9\015\ufff9\032\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\001\002\000\006\002\ufff0" +
    "\005\ufff0\001\002\000\026\003\041\005\033\006\032\015" +
    "\043\032\031\035\025\036\034\037\021\040\044\041\026" +
    "\001\002\000\026\003\uffe6\005\uffe6\006\uffe6\015\uffe6\032" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\001\002" +
    "\000\004\006\154\001\002\000\026\003\041\005\033\006" +
    "\032\015\153\032\031\035\025\036\034\037\021\040\044" +
    "\041\026\001\002\000\026\003\uffe2\005\uffe2\006\uffe2\015" +
    "\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\001\002\000\026\003\uffe4\005\uffe4\006\uffe4\015\uffe4\032" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002" +
    "\000\004\012\145\001\002\000\014\006\064\025\062\026" +
    "\055\027\056\031\053\001\002\000\026\003\uffe1\005\uffe1" +
    "\006\uffe1\015\uffe1\032\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\041\uffe1\001\002\000\026\003\uffdf\005\uffdf\006\uffdf" +
    "\015\uffdf\032\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\001\002\000\004\012\133\001\002\000\010\012\077" +
    "\016\102\020\100\001\002\000\004\011\072\001\002\000" +
    "\004\014\017\001\002\000\026\003\uffe8\005\uffe8\006\uffe8" +
    "\015\uffe8\032\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\001\002\000\026\003\uffe3\005\uffe3\006\uffe3\015\uffe3" +
    "\032\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001" +
    "\002\000\026\003\uffe0\005\uffe0\006\uffe0\015\uffe0\032\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\001\002\000" +
    "\026\003\uffe7\005\uffe7\006\uffe7\015\uffe7\032\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\001\002\000\026\003" +
    "\uffde\005\uffde\006\uffde\015\uffde\032\uffde\035\uffde\036\uffde" +
    "\037\uffde\040\uffde\041\uffde\001\002\000\026\003\uffe5\005" +
    "\uffe5\006\uffe5\015\uffe5\032\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\uffe5\041\uffe5\001\002\000\032\002\uffea\003\uffea\005" +
    "\uffea\006\uffea\015\uffea\032\uffea\033\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\001\002\000\004\030\045\001" +
    "\002\000\004\007\046\001\002\000\026\003\uffd9\005\uffd9" +
    "\006\uffd9\015\uffd9\032\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\001\002\000\004\035\050\001\002\000\004" +
    "\012\051\001\002\000\014\006\060\025\062\026\055\027" +
    "\056\031\053\001\002\000\006\013\uffc7\024\070\001\002" +
    "\000\014\007\uffbe\010\uffbe\013\uffbe\023\uffbe\024\uffbe\001" +
    "\002\000\004\013\066\001\002\000\014\007\uffc1\010\uffc1" +
    "\013\uffc1\023\uffc1\024\uffc1\001\002\000\014\007\uffc0\010" +
    "\uffc0\013\uffc0\023\uffc0\024\uffc0\001\002\000\006\013\uffc4" +
    "\024\uffc4\001\002\000\006\013\uffc6\023\uffc2\001\002\000" +
    "\004\023\063\001\002\000\014\007\uffbf\010\uffbf\013\uffbf" +
    "\023\uffbf\024\uffbf\001\002\000\014\006\064\025\062\026" +
    "\055\027\056\031\053\001\002\000\014\007\uffc2\010\uffc2" +
    "\013\uffc2\023\uffc2\024\uffc2\001\002\000\006\013\uffc3\024" +
    "\uffc3\001\002\000\004\007\067\001\002\000\026\003\uffc9" +
    "\005\uffc9\006\uffc9\015\uffc9\032\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\001\002\000\014\006\064\025\062" +
    "\026\055\027\056\031\053\001\002\000\006\013\uffc5\024" +
    "\uffc5\001\002\000\004\006\073\001\002\000\006\007\ufff6" +
    "\010\ufff6\001\002\000\006\007\ufff8\010\075\001\002\000" +
    "\004\006\076\001\002\000\006\007\ufff7\010\ufff7\001\002" +
    "\000\016\006\064\013\123\025\062\026\055\027\056\031" +
    "\053\001\002\000\010\006\106\012\107\026\113\001\002" +
    "\000\026\003\uffdd\005\uffdd\006\uffdd\015\uffdd\032\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001\002\000\004" +
    "\026\103\001\002\000\004\017\104\001\002\000\004\020" +
    "\100\001\002\000\026\003\uffdc\005\uffdc\006\uffdc\015\uffdc" +
    "\032\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\010\007\uffce\021\122\022\uffce\001\002\000\010" +
    "\006\115\012\107\026\113\001\002\000\010\007\uffd0\013" +
    "\uffd0\022\uffd0\001\002\000\004\007\117\001\002\000\006" +
    "\007\uffd2\022\114\001\002\000\010\007\uffcd\013\uffcd\022" +
    "\uffcd\001\002\000\010\006\115\012\107\026\113\001\002" +
    "\000\010\007\uffce\013\uffce\022\uffce\001\002\000\010\007" +
    "\uffd1\013\uffd1\022\uffd1\001\002\000\026\003\uffdb\005\uffdb" +
    "\006\uffdb\015\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\001\002\000\006\013\121\022\114\001\002" +
    "\000\010\007\uffcf\013\uffcf\022\uffcf\001\002\000\004\007" +
    "\uffd3\001\002\000\004\007\132\001\002\000\006\010\uffd4" +
    "\013\uffd4\001\002\000\006\010\126\013\127\001\002\000" +
    "\014\006\064\025\062\026\055\027\056\031\053\001\002" +
    "\000\004\007\130\001\002\000\026\003\uffd7\005\uffd7\006" +
    "\uffd7\015\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\001\002\000\006\010\uffd5\013\uffd5\001\002\000" +
    "\026\003\uffd6\005\uffd6\006\uffd6\015\uffd6\032\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\001\002\000\014\006" +
    "\060\025\062\026\055\027\056\031\053\001\002\000\004" +
    "\013\135\001\002\000\004\034\136\001\002\000\004\014" +
    "\017\001\002\000\030\003\uffca\005\uffca\006\uffca\015\uffca" +
    "\032\uffca\033\140\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\001\002\000\004\014\017\001\002\000\026\003\uffcc" +
    "\005\uffcc\006\uffcc\015\uffcc\032\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\001\002\000\026\003\uffcb\005\uffcb" +
    "\006\uffcb\015\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\001\002\000\004\007\144\001\002\000\026" +
    "\003\uffd8\005\uffd8\006\uffd8\015\uffd8\032\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000\014\006\060" +
    "\025\062\026\055\027\056\031\053\001\002\000\004\013" +
    "\147\001\002\000\004\036\150\001\002\000\004\014\017" +
    "\001\002\000\026\003\uffc8\005\uffc8\006\uffc8\015\uffc8\032" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002" +
    "\000\026\003\uffe9\005\uffe9\006\uffe9\015\uffe9\032\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001\002\000\032" +
    "\002\uffeb\003\uffeb\005\uffeb\006\uffeb\015\uffeb\032\uffeb\033" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\001\002" +
    "\000\004\007\155\001\002\000\026\003\uffda\005\uffda\006" +
    "\uffda\015\uffda\032\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\001\002\000\004\006\157\001\002\000\012\007" +
    "\ufff6\010\ufff6\012\167\016\165\001\002\000\006\007\ufff4" +
    "\010\162\001\002\000\006\007\ufff2\010\ufff2\001\002\000" +
    "\004\006\163\001\002\000\004\016\165\001\002\000\006" +
    "\007\ufff3\010\ufff3\001\002\000\004\017\166\001\002\000" +
    "\006\007\ufff1\010\ufff1\001\002\000\010\005\171\010\uffec" +
    "\013\uffec\001\002\000\006\010\174\013\175\001\002\000" +
    "\004\011\172\001\002\000\004\006\173\001\002\000\006" +
    "\010\uffed\013\uffed\001\002\000\004\005\176\001\002\000" +
    "\004\014\uffef\001\002\000\004\011\177\001\002\000\004" +
    "\006\200\001\002\000\006\010\uffee\013\uffee\001\002\000" +
    "\006\002\ufff5\005\ufff5\001\002\000\006\002\001\005\001" +
    "\001\002\000\006\002\ufffe\005\ufffe\001\002\000\004\002" +
    "\000\001\002\000\006\002\ufffc\005\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\002\013\004\006\005\004\006\003\007" +
    "\005\010\012\011\011\001\001\000\002\001\001\000\016" +
    "\002\013\004\006\006\201\007\202\010\204\011\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\013\006\037\016\021\017\034\020\017\025" +
    "\026\027\036\030\027\035\041\036\023\037\035\040\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\013\006\037\017\151\020\017\025\026\027\036\030\027" +
    "\035\041\036\023\037\035\040\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\100\001\001\000\002\001\001\000\004" +
    "\012\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\031\053\032\051\033\056\034\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\070\034\060\001\001" +
    "\000\002\001\001\000\004\013\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\123\041\124\001\001\000\010\022\110\023" +
    "\111\024\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\117\024\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\031\133\032\051\033\056\034\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\136" +
    "\001\001\000\004\026\140\001\001\000\004\012\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\145\032\051\033\056\034" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\073\014\157\015\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error( Symbol s ){
	System.out.println("ERROR SINTACTICO. Linea: " + s.left+", columna: " + s.right );
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception{
	System.out.println("ERROR SINTACTICO. El sistema no se pudo recuperar");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAL ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAL ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAL ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COMP ::= VAL OP_COMP VAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPR_F1 ::= COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPR_F1 ::= EXPR_F1 OP_COMP_L COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F1",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPR_F ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPR_F ::= EXPR_F1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // C_FLUJO_WHILE ::= WHILE PAR_AB EXPR_F PAR_CER DO BLOQUE 
            {
              Object RESULT =null;
		 System.out.println("Control WHILE ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_WHILE",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // C_FLUJO_DOWHILE ::= DO BLOQUE WHILE PAR_AB EXPR_F PAR_CER END 
            {
              Object RESULT =null;
		 System.out.println("Control DO WHILE ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_DOWHILE",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // C_FLUJO_ELSE ::= 
            {
              Object RESULT =null;
		 System.out.println("Control if ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // C_FLUJO_ELSE ::= ELSE BLOQUE 
            {
              Object RESULT =null;
		 System.out.println("Control if else ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // C_FLUJO_IF ::= IF PAR_AB EXPR_F PAR_CER THEN BLOQUE C_FLUJO_ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_IF",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // F ::= ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // F ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // F ::= PAR_AB E PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E OP_BINARIO F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= ID OP_UNARIO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LLAM_F1 ::= VAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F1",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LLAM_F1 ::= LLAM_F1 COMA VAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F1",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LLAM_F ::= ID PAR_AB PAR_CER END 
            {
              Object RESULT =null;
		 System.out.println("llamada a funcion vacia"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LLAM_F ::= ID PAR_AB LLAM_F1 PAR_CER END 
            {
              Object RESULT =null;
		 System.out.println("llamada a funcion con parametros"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPR_RTN ::= RETURN VAL END 
            {
              Object RESULT =null;
		 System.out.println("RETURN ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_RTN",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPR_OUT ::= OUTPUT STRING END 
            {
              Object RESULT =null;
		 System.out.println("OUTPUT ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_OUT",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPR_IN ::= INPUT ID END 
            {
              Object RESULT =null;
		 System.out.println("INPUT ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_IN",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIBUCIONES1 ::= IGUAL EXPRESION END 
            {
              Object RESULT =null;
		 System.out.println("atribucion ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIBUCIONES ::= ID COR_AB ENTERO COR_CER ATRIBUCIONES1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIBUCIONES ::= ID ATRIBUCIONES1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMANDO_S ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMANDO_S ::= C_FLUJO_DOWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMANDO_S ::= C_FLUJO_WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMANDO_S ::= C_FLUJO_IF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // COMANDO_S ::= LLAM_F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMANDO_S ::= OPR_RTN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // COMANDO_S ::= OPR_OUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMANDO_S ::= OPR_IN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COMANDO_S ::= ATRIBUCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMANDO_S ::= decl_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDO_S",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMANDOS ::= COMANDO_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMANDOS ::= COMANDOS COMANDO_S 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BLOQUE ::= LLAV_AB LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BLOQUE ::= LLAV_AB COMANDOS LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXP ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXP ::= TIPO DOSPUN ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= EXP COMA TIPO DOSPUN ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ENCAB ::= TIPO DOSPUN ID PAR_AB EXP PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl_fun ::= ENCAB BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_fun",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VECT ::= ID COR_AB COR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VECT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTAV ::= VECT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTAV",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTAV ::= LISTAV COMA VECT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTAV",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exprvec ::= TIPO DOSPUN LISTAV 
            {
              Object RESULT =null;
		 System.out.println("declaracion globalV ok"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("exprvec",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl_vec ::= exprvec END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_vec",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LISTA ::= LISTA COMA ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= TIPO DOSPUN LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_var ::= expr END 
            {
              Object RESULT =null;
		 System.out.println("declaracion ok "); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("decl_var",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_list ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_list ::= decl_fun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_list ::= expr_list decl_fun 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_list ::= decl_vec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr_list decl_vec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= decl_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list decl_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expr_list",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

