
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 29 05:59:22 GMT-05:00 2016
//----------------------------------------------------

package comp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 29 05:59:22 GMT-05:00 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\006\005\000\002\007\004\000" +
    "\002\007\005\000\002\010\005\000\002\011\007\000\002" +
    "\011\010\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\012\004\000" +
    "\002\052\002\000\002\013\010\000\002\053\002\000\002" +
    "\013\010\000\002\014\003\000\002\054\002\000\002\014" +
    "\010\000\002\055\002\000\002\015\010\000\002\015\002" +
    "\000\002\016\007\000\002\016\003\000\002\017\005\000" +
    "\002\017\004\000\002\020\004\000\002\020\003\000\002" +
    "\021\005\000\002\022\004\000\002\022\005\000\002\023" +
    "\004\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\024\004\000\002\056\002\000\002\025\005\000\002\057" +
    "\002\000\002\025\010\000\002\026\004\000\002\026\005" +
    "\000\002\027\004\000\002\027\003\000\002\030\005\000" +
    "\002\030\003\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\005" +
    "\000\002\034\005\000\002\035\004\000\002\035\002\000" +
    "\002\036\004\000\002\036\004\000\002\037\011\000\002" +
    "\040\004\000\002\040\002\000\002\042\011\000\002\041" +
    "\010\000\002\043\003\000\002\043\003\000\002\044\005" +
    "\000\002\044\003\000\002\045\005\000\002\046\003\000" +
    "\002\046\003\000\002\047\003\000\002\047\003\000\002" +
    "\060\002\000\002\050\010\000\002\050\006\000\002\051" +
    "\003\000\002\061\002\000\002\051\006\000\002\051\003" +
    "\000\002\062\002\000\002\051\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\016\003\012\041\015\042\004\043\016\044" +
    "\010\045\006\001\002\000\004\037\ufff4\001\002\000\004" +
    "\002\273\001\002\000\004\037\ufff1\001\002\000\020\003" +
    "\043\041\015\042\004\043\016\044\010\045\006\046\040" +
    "\001\002\000\004\037\ufff0\001\002\000\020\003\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002" +
    "\000\020\003\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\001\002\000\004\037\017\001\002\000\020" +
    "\003\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\001\002\000\004\037\ufff2\001\002\000\004\037\ufff3" +
    "\001\002\000\004\035\021\001\002\000\020\003\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\001\002" +
    "\000\010\011\025\036\023\040\024\001\002\000\020\003" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\001\002\000\004\035\035\001\002\000\020\003\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002" +
    "\000\004\021\026\001\002\000\004\012\027\001\002\000" +
    "\006\036\030\040\031\001\002\000\004\035\032\001\002" +
    "\000\020\003\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\001\002\000\004\011\025\001\002\000\020" +
    "\003\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\001\002\000\020\003\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\001\002\000\006\036\023\040" +
    "\024\001\002\000\004\007\103\001\002\000\020\002\001" +
    "\041\015\042\004\043\016\044\010\045\006\046\040\001" +
    "\002\000\004\037\070\001\002\000\020\003\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\001\002\000" +
    "\004\037\046\001\002\000\020\002\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000\020\003" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\001\002\000\020\002\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\001\002\000\004\035\047\001\002" +
    "\000\012\005\uffeb\011\025\036\023\040\024\001\002\000" +
    "\004\005\051\001\002\000\016\006\052\041\015\042\004" +
    "\043\016\044\010\045\006\001\002\000\004\007\uffe7\001" +
    "\002\000\004\007\uffea\001\002\000\004\037\055\001\002" +
    "\000\004\035\056\001\002\000\006\006\uffe6\036\uffe6\001" +
    "\002\000\006\006\uffe2\036\060\001\002\000\014\041\015" +
    "\042\004\043\016\044\010\045\006\001\002\000\004\006" +
    "\062\001\002\000\004\007\uffe5\001\002\000\004\037\064" +
    "\001\002\000\004\035\065\001\002\000\006\006\uffe4\036" +
    "\uffe4\001\002\000\006\006\uffe2\036\060\001\002\000\004" +
    "\006\uffe3\001\002\000\004\035\071\001\002\000\004\005" +
    "\uffe9\001\002\000\004\005\073\001\002\000\016\006\052" +
    "\041\015\042\004\043\016\044\010\045\006\001\002\000" +
    "\004\007\uffe8\001\002\000\004\037\077\001\002\000\020" +
    "\002\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\001\002\000\004\035\100\001\002\000\004\005\uffeb" +
    "\001\002\000\020\002\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\001\002\000\020\002\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\001\002\000" +
    "\034\003\124\010\126\025\116\030\113\031\121\032\106" +
    "\033\127\035\117\041\015\042\004\043\016\044\010\045" +
    "\006\001\002\000\032\003\124\025\116\030\113\031\121" +
    "\032\106\033\127\035\117\041\015\042\004\043\016\044" +
    "\010\045\006\001\002\000\024\003\uffd6\010\uffd6\025\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\001" +
    "\002\000\004\035\257\001\002\000\022\003\124\010\255" +
    "\025\116\030\113\031\121\032\106\033\127\035\117\001" +
    "\002\000\024\003\uffd7\010\uffd7\025\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\001\002\000\024\003" +
    "\uffd0\010\uffd0\025\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\001\002\000\024\003\uffd4\010\uffd4\025" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\001\002\000\004\005\250\001\002\000\024\003\uffd3\010" +
    "\uffd3\025\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\001\002\000\024\003\uffd1\010\uffd1\025\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\001\002" +
    "\000\004\005\240\001\002\000\012\005\172\011\173\013" +
    "\uffcd\014\uffcd\001\002\000\004\037\164\001\002\000\004" +
    "\007\135\001\002\000\032\003\uffdc\025\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\035\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\001\002\000\024\003\uffd2\010\uffd2\025" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\001\002\000\006\010\132\040\133\001\002\000\024\003" +
    "\uffd5\010\uffd5\025\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\001\002\000\044\002\uffde\003\uffde\010" +
    "\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\046\uffde\001\002\000\004\023\130\001\002\000\004" +
    "\040\131\001\002\000\024\003\uffba\010\uffba\025\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\001\002" +
    "\000\024\003\uffce\010\uffce\025\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\001\002\000\024\003\uffcf" +
    "\010\uffcf\025\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\001\002\000\004\030\136\001\002\000\022" +
    "\003\124\010\126\025\116\030\113\031\121\032\106\033" +
    "\127\035\117\001\002\000\004\005\137\001\002\000\016" +
    "\020\152\021\144\022\146\023\140\024\142\035\150\001" +
    "\002\000\016\006\uffc0\015\uffc0\016\uffc0\017\uffc0\036\uffc0" +
    "\040\uffc0\001\002\000\006\006\uffb0\017\161\001\002\000" +
    "\016\006\uffbc\015\uffbc\016\uffbc\017\uffbc\036\uffbc\040\uffbc" +
    "\001\002\000\004\006\157\001\002\000\016\006\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\036\uffbf\040\uffbf\001\002\000\004" +
    "\016\153\001\002\000\016\006\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\036\uffbe\040\uffbe\001\002\000\006\006\uffad\017\uffad" +
    "\001\002\000\006\006\uffaf\016\uffab\001\002\000\004\016" +
    "\uffaa\001\002\000\016\006\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\036\uffbd\040\uffbd\001\002\000\016\020\152\021\144\022" +
    "\146\023\140\024\142\035\154\001\002\000\006\006\uffa9" +
    "\017\uffa9\001\002\000\006\006\uffa8\017\uffa8\001\002\000" +
    "\006\006\uffac\017\uffac\001\002\000\004\040\160\001\002" +
    "\000\024\003\uffb2\010\uffb2\025\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\001\002\000\016\020\152" +
    "\021\144\022\146\023\140\024\142\035\163\001\002\000" +
    "\006\006\uffae\017\uffae\001\002\000\004\016\uffab\001\002" +
    "\000\004\035\165\001\002\000\006\036\167\040\170\001" +
    "\002\000\032\003\uffdb\025\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\035\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\001\002\000\004\035\165\001\002\000\032\003\uffda" +
    "\025\uffda\030\uffda\031\uffda\032\uffda\033\uffda\035\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\001\002\000\032" +
    "\003\uffd9\025\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\001\002" +
    "\000\020\006\222\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\035\uffa7\001\002\000\004\021\216\001\002\000\006" +
    "\013\176\014\175\001\002\000\004\040\215\001\002\000" +
    "\020\005\201\020\152\021\144\022\146\023\140\024\142" +
    "\035\200\001\002\000\024\003\uffcc\010\uffcc\025\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\001\002" +
    "\000\010\014\214\015\uffc2\040\uffc2\001\002\000\020\005" +
    "\201\020\152\021\144\022\146\023\140\024\142\035\207" +
    "\001\002\000\010\006\uffc1\015\uffc1\040\uffc1\001\002\000" +
    "\004\040\211\001\002\000\010\006\uffc4\015\uffc4\040\uffc4" +
    "\001\002\000\006\015\206\040\uffc6\001\002\000\020\005" +
    "\201\020\152\021\144\022\146\023\140\024\142\035\207" +
    "\001\002\000\010\006\uffc2\015\uffc2\040\uffc2\001\002\000" +
    "\010\006\uffc5\015\uffc5\040\uffc5\001\002\000\024\003\uffc8" +
    "\010\uffc8\025\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\001\002\000\006\006\213\015\206\001\002" +
    "\000\010\006\uffc3\015\uffc3\040\uffc3\001\002\000\004\040" +
    "\uffc7\001\002\000\024\003\uffc9\010\uffc9\025\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\001\002\000" +
    "\004\012\217\001\002\000\006\013\uffcb\014\uffcb\001\002" +
    "\000\006\013\176\014\175\001\002\000\024\003\uffca\010" +
    "\uffca\025\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\001\002\000\004\040\237\001\002\000\016\020" +
    "\152\021\144\022\146\023\140\024\142\035\224\001\002" +
    "\000\006\006\uffa4\036\234\001\002\000\006\006\uffa1\036" +
    "\231\001\002\000\004\006\227\001\002\000\004\040\230" +
    "\001\002\000\024\003\uffa6\010\uffa6\025\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\001\002\000\016" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\035\uffa0\001" +
    "\002\000\016\020\152\021\144\022\146\023\140\024\142" +
    "\035\224\001\002\000\004\006\uff9f\001\002\000\016\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\035\uffa3\001\002" +
    "\000\016\020\152\021\144\022\146\023\140\024\142\035" +
    "\224\001\002\000\004\006\uffa2\001\002\000\024\003\uffa5" +
    "\010\uffa5\025\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\001\002\000\016\020\152\021\144\022\146" +
    "\023\140\024\142\035\150\001\002\000\004\006\242\001" +
    "\002\000\004\027\243\001\002\000\004\007\135\001\002" +
    "\000\026\003\uffb3\010\uffb3\025\uffb3\026\245\030\uffb3\031" +
    "\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\001\002\000\004" +
    "\007\135\001\002\000\024\003\uffb5\010\uffb5\025\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\001\002" +
    "\000\024\003\uffb4\010\uffb4\025\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\001\002\000\016\020\152" +
    "\021\144\022\146\023\140\024\142\035\150\001\002\000" +
    "\004\006\252\001\002\000\004\031\253\001\002\000\004" +
    "\007\135\001\002\000\024\003\uffb1\010\uffb1\025\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\001\002" +
    "\000\044\002\uffdf\003\uffdf\010\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002\000" +
    "\024\003\uffd8\010\uffd8\025\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\001\002\000\004\040\260\001" +
    "\002\000\024\003\uffbb\010\uffbb\025\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\001\002\000\024\003" +
    "\124\010\uffb8\025\116\030\113\031\121\032\106\033\127" +
    "\034\264\035\117\001\002\000\032\003\uffdd\025\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\001\002\000\004\010\272\001" +
    "\002\000\016\020\152\021\144\022\146\023\140\024\142" +
    "\035\265\001\002\000\004\040\271\001\002\000\004\010" +
    "\uffb9\001\002\000\004\040\270\001\002\000\004\010\uffb6" +
    "\001\002\000\004\010\uffb7\001\002\000\020\002\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\014\002\004\003\006\005\012\006\010\010" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\036\005\041\006\040\010\043\012" +
    "\044\013\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\017\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\101\017\100\001\001\000\010\005\074\012\075\013\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\017\011\021\001\001\000\004\052\047\001" +
    "\001\000\002\001\001\000\006\005\053\014\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\056\001\001\000\004\015\060" +
    "\001\001\000\004\005\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\065\001\001\000\004\015\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\071\001\001\000\002" +
    "\001\001\000\006\005\053\014\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\117\020\103\021\121\023\106\024\107" +
    "\025\104\033\124\034\111\037\113\041\122\042\114\050" +
    "\110\001\001\000\030\005\117\021\261\023\260\024\107" +
    "\025\104\033\124\034\111\037\113\041\122\042\114\050" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\255\025\104\033\124\034\111\037\113\041\122\042" +
    "\114\050\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\173\001\001" +
    "\000\002\001\001\000\004\017\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\023\106\024\107\025\104\033\124\034" +
    "\111\037\113\041\122\042\114\050\110\001\001\000\002" +
    "\001\001\000\014\032\150\043\142\044\140\045\146\046" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\154\047" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\150\045\161\046\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\222\001\001\000\002\001" +
    "\001\000\004\026\176\001\001\000\002\001\001\000\012" +
    "\027\202\030\204\031\203\032\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\211\031\203\032\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\207\032\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\217\001\001\000" +
    "\004\026\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\224\051\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\231\001\001\000\006\032\224\051" +
    "\232\001\001\000\002\001\001\000\004\061\234\001\001" +
    "\000\006\032\224\051\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\032\150\043\240\044\140\045\146" +
    "\046\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\243\001\001\000\004\040\245\001\001\000\004" +
    "\017\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\032\150\043\250\044\140\045\146\046\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\024\255\025" +
    "\104\033\124\034\111\035\262\037\113\041\122\042\114" +
    "\050\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\266\036\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error( Symbol s ){
	System.out.println("ERROR SINTACTICO. Linea: " + s.left+", columna: " + s.right );
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception{
	System.out.println("ERROR SINTACTICO. El sistema no se pudo recuperar, linea");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


	Programa programa=new Programa();
	int tipo,valor,param;
	int funcion=-1;	
	Funcion func_b;
	
	/*Buscamos algun vector*/
	public void buscar_id(String id,int func,int linea){
		int aux= programa.buscarID(id,func);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no ha sido declarado");
		}else{
			tipo=aux;
		}
	}
	/*Buscamos algun vector*/
	public void buscar_v(String id,int tamano,int linea){
		int aux=programa.buscar_vectores(id);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El arreglo \""+id+"\" no ha sido declarado");
		}else{
			DeclaracionVector vect_aux=programa.vectores.get(aux);
			tipo=vect_aux.tipo;			
			if(vect_aux.tamano<=tamano){
				System.out.println("ERROR en linea:"+linea+". Se ha excedido el tamano del arreglo \""+id+"\".");
			}
		}
	}
	
	/*Insertaremos una funcion cuando no se repita su id*/
	public void insertar_funciones(String id,int linea){
		if(programa.buscar_funcion(id)==-1){
			programa.funciones.add(new Funcion(tipo, id));
			funcion++;
		}else{
			System.out.println("ERROR en linea:"+linea+". La funcion \""+id+"()\" ya ha sido declarada antes");
		}
		
		
	}
	/*Buscamos si existe un ID cuando se hacen atribuciones. Comprobamos la induccion y la inferencia */
	public void buscar_id_atrib(String id,int func,int linea){
		int aux= programa.buscarID(id,func);			
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no ha sido declarado");
		}else{			
			if(tipo==sym.INT||tipo==sym.FLOAT||tipo==sym.BOOL){				
				if(aux==sym.STRING){
					System.out.println("ERROR en linea:"+linea+", identificador \""+id+"\". No hay induccion para variables de tipo String.");
				}else{
					if(aux==sym.CHAR){					
						System.out.println("ERROR en linea:"+linea+", identificador \""+id+"\". No hay induccion para variables de tipo char.");					
					}
				}
			}else{
				if(tipo==sym.STRING){
					if(aux!=sym.STRING){
						System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no es de tipo String.");
					}
				}else{
					if(aux!=sym.CHAR){
						System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no es de tipo char.");
					}
				}
			}
		}
	}
	/*Verificamos si algun dato coincide con su tipo*/
	public void verificar_valor(int linea, int columna){
		switch(valor){
		case sym.INT:
			if(tipo!=sym.INT){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo int es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.FLOAT:
			if(tipo!=sym.FLOAT){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo float es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.BOOL:
			if(tipo!=sym.BOOL){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo bool es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.CHAR:
			if(tipo!=sym.CHAR){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo char es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.STRING:
			if(tipo!=sym.STRING){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo String es incompatible con el tipo de variable del identificador.");	
			}
		break;
		
		}
	}
	/*Verificamos si una funcion es void*/
	public void verif_funcion1(int ind,int linea){
		if(programa.funciones.get(ind).var_param.isEmpty()){
			System.out.println("ERROR. en linea:"+linea+". La funcion es de tipo void y no debe retornar nada.");
		}
	}
	/*Verificamos si una funcion es de cualquier tipo*/
	public void verif_funcion2(int ind){
		Funcion aux=programa.funciones.get(ind);
		if(aux.tipo!=sym.VOID){
			System.out.println("Funcion tipo:"+aux.tipo);
			System.out.println("ERROR. La funcion "+aux.id+ "() debe retornar un tipo de valor");
		}
	}
	
	/*Buscamos si existe una funcion*/
	public void buscar_func(String id,int linea){
		int aux=programa.buscar_funcion(id);
		if(aux==-1){			
			System.out.println("ERROR en linea:"+linea+". La funcion \""+id+"()\" no existe.");
			func_b=null;
		}else{
			func_b=programa.funciones.get(aux);
			param=0;
		}	
	}
	
	/*Vemos si la funcion vacia que llamamos tiene parametros*/
	public void llamar1(int linea){
		 if(func_b!=null){
			 if(func_b.var_param.size()!=param){
				 System.out.println("ERROR. En linea: "+linea+". La funcion \""+func_b.id+"()\" recibe parametros.");
			 }
		 }
	 }	
	 
	/*Meotodo para ver si coinciden los parametros con los ids de una funcion buscada*/
	public void llamar2(String id,int linea){
		 if(func_b!=null){
			 if(param==func_b.var_param.size()){
				 System.out.println("ERROR. En linea: "+linea+". La funcion \""+func_b.id+"()\" no recibe tantos parametros");
			 }else{
				 buscar_id(id,funcion,linea);
				 if(tipo!=func_b.var_param.get(param).tipo){
					 System.out.println("ERROR. En linea: "+linea+". El identificador \""+id+"\" no corresponde al mismo tipo que recibe la funcion");
				 }
				 param++;
			 }
		 }
	 }

	public void llamar3(int linea){
		if(func_b!=null){
			 if(param==func_b.var_param.size()){
				 System.out.println("ERROR. En linea: "+linea+". La funcion \""+func_b.id+"()\" no recibe tantos parametros");
			 }else{				 
				 if(valor!=func_b.var_param.get(param).tipo){
					 System.out.println("ERROR. En linea: "+linea+". El tipo de dato en el parametro "+(param+1)+" no corresponde al mismo que recibe la funcion.");
				 }
				 param++;
			 }
		}
			
	}
	
	 
	

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LLAM_F1 ::= VAL COMA NT$8 LLAM_F1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$8 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 llamar3(rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAM_F1 ::= VAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 llamar3(rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LLAM_F1 ::= ID COMA NT$7 LLAM_F1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$7 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 llamar2(r,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LLAM_F1 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 llamar2(r,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LLAM_F ::= ID PAR_AB PAR_CER END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		 buscar_func(r,rleft);llamar1(rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LLAM_F ::= ID PAR_AB NT$6 LLAM_F1 PAR_CER END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 param=0; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$6 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 buscar_func(r,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMP2 ::= VAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMP2 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
			int aux=programa.buscarID(r,funcion);
			if(aux==-1){
				System.out.println("ERROR en linea:"+rleft+". El identificador \""+r+"\" no ha sido declarado");
			}else{
				valor=aux;
			}
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COMP1 ::= VAL 
            {
              Object RESULT =null;
		 tipo=valor; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COMP1 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 buscar_id(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COMP ::= COMP1 OP_COMP COMP2 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 if(tipo!=valor){System.out.println("ERROR. en linea"+rleft+". Variables de tipo incompatible");} 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR_F1 ::= COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR_F1 ::= EXPR_F1 OP_COMP_L COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPR_F ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPR_F ::= EXPR_F1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // C_FLUJO_WHILE ::= WHILE PAR_AB EXPR_F PAR_CER DO BLOQUE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_WHILE",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // C_FLUJO_DOWHILE ::= DO BLOQUE1 WHILE PAR_AB EXPR_F PAR_CER END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_DOWHILE",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // C_FLUJO_ELSE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // C_FLUJO_ELSE ::= ELSE BLOQUE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // C_FLUJO_IF ::= IF PAR_AB EXPR_F PAR_CER THEN BLOQUE1 C_FLUJO_ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_IF",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPR_RTN1 ::= VAL END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
						if(valor!=programa.funciones.get(funcion).tipo){
							System.out.println("ERROR. En linea:"+rleft+". El dato que se quiere retornar es de diferente tipo al de la funcion"); 
						}
					
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPR_RTN1 ::= ID END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 buscar_id(r,funcion,rleft);
						if(tipo!=programa.funciones.get(funcion).tipo){
							System.out.println("ERROR. En linea:"+rleft+". La variable que se quiere retornar es de diferente tipo al de la funcion"); 
						} 
					 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPR_RTN ::= 
            {
              Object RESULT =null;
		verif_funcion2(funcion);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPR_RTN ::= RETURN OPR_RTN1 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		verif_funcion1(funcion,rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPR_OUT ::= OUTPUT CADENA END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_OUT",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPR_IN ::= INPUT ID END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 buscar_id(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_IN",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VAL ::= BOOLEANO 
            {
              Object RESULT =null;
		 valor=sym.BOOL; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VAL ::= CARACTER 
            {
              Object RESULT =null;
		 valor=sym.CHAR; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;
		 valor=sym.FLOAT; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL ::= ENTERO 
            {
              Object RESULT =null;
		 valor=sym.INT; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL ::= CADENA 
            {
              Object RESULT =null;
		 valor=sym.STRING; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= VAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 verificar_valor(rleft,rright); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 buscar_id_atrib(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // F ::= PAR_AB E PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E OP_BINARIO F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= ID OP_UNARIO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 buscar_id_atrib(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUCIONES1 ::= IGUAL EXPRESION END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUCIONES1 ::= OP_UNARIO END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIBUCIONES ::= ID COR_AB ENTERO COR_CER NT$5 ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$5 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 buscar_v(r1,(int)r2,r1left); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUCIONES ::= ID NT$4 ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$4 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 buscar_id(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMANDOS1 ::= error LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMANDOS1 ::= error END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMANDOS1 ::= LLAM_F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMANDOS1 ::= C_FLUJO_DOWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMANDOS1 ::= C_FLUJO_WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMANDOS1 ::= C_FLUJO_IF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMANDOS1 ::= OPR_OUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMANDOS1 ::= OPR_IN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMANDOS1 ::= ATRIBUCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMANDOS ::= COMANDOS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMANDOS ::= COMANDOS COMANDOS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC_L2 ::= ID COMA DEC_L2 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC_L2 ::= ID END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC_L1 ::= TIPO DOSPUN DEC_L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC_L ::= DEC_L1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_L ::= DEC_L DEC_L1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUE1 ::= LLAV_AB LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE1 ::= LLAV_AB COMANDOS LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE ::= BLOQUE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE ::= LLAV_AB DEC_L COMANDOS OPR_RTN LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ENCAB1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ENCAB1 ::= COMA TIPO DOSPUN ID NT$3 ENCAB1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENCAB ::= TIPO DOSPUN ID NT$2 ENCAB1 PAR_CER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENCAB ::= PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= VOID DOSPUN ID NT$1 PAR_AB ENCAB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
tipo=sym.VOID; insertar_funciones(r,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= TIPO DOSPUN ID NT$0 PAR_AB ENCAB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 insertar_funciones(r,rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= FUNC BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= STRING 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= BOOL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= FLOAT 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= INT 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC_V1 ::= ID COR_AB ENTERO COR_CER COMA DEC_V1 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		  programa.insertar_vectores(tipo,r1,(int) r2,r1left); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_V1 ::= ID COR_AB ENTERO COR_CER END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  programa.insertar_vectores(tipo,r1,(int) r2,r1left);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_V ::= TIPO DOSPUN DEC_V1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_V",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEC_G1 ::= ID COMA DEC_G1 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		programa.insertar_vglobales(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC_G1 ::= ID END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		programa.insertar_vglobales(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC_G ::= TIPO DOSPUN DEC_G1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_G",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DEC_V 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACIONES DEC_V 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DEC_G 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES ::= DECLARACIONES DEC_G 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

