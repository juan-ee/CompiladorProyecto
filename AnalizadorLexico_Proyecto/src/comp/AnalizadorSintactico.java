
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jan 29 04:01:39 GMT-05:00 2016
//----------------------------------------------------

package comp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jan 29 04:01:39 GMT-05:00 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\006\005\000\002\007\004\000" +
    "\002\007\005\000\002\010\005\000\002\011\007\000\002" +
    "\011\010\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\012\004\000" +
    "\002\046\002\000\002\013\010\000\002\047\002\000\002" +
    "\013\010\000\002\014\003\000\002\050\002\000\002\014" +
    "\010\000\002\051\002\000\002\015\010\000\002\015\002" +
    "\000\002\016\006\000\002\016\003\000\002\017\005\000" +
    "\002\017\004\000\002\020\004\000\002\020\003\000\002" +
    "\021\005\000\002\022\004\000\002\022\005\000\002\023" +
    "\004\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\024\004\000\002" +
    "\052\002\000\002\025\005\000\002\053\002\000\002\025" +
    "\010\000\002\026\004\000\002\026\005\000\002\027\004" +
    "\000\002\027\003\000\002\030\005\000\002\030\003\000" +
    "\002\031\005\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\005\000\002\034\005" +
    "\000\002\035\011\000\002\036\004\000\002\036\002\000" +
    "\002\040\011\000\002\037\010\000\002\041\003\000\002" +
    "\041\003\000\002\042\005\000\002\042\003\000\002\043" +
    "\005\000\002\044\003\000\002\044\003\000\002\045\003" +
    "\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\016\003\012\041\015\042\004\043\016\044" +
    "\010\045\006\001\002\000\004\037\ufff4\001\002\000\004" +
    "\002\244\001\002\000\004\037\ufff1\001\002\000\020\003" +
    "\043\041\015\042\004\043\016\044\010\045\006\046\040" +
    "\001\002\000\004\037\ufff0\001\002\000\020\003\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002" +
    "\000\020\003\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\001\002\000\004\037\017\001\002\000\020" +
    "\003\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\001\002\000\004\037\ufff2\001\002\000\004\037\ufff3" +
    "\001\002\000\004\035\021\001\002\000\020\003\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\001\002" +
    "\000\010\011\025\036\023\040\024\001\002\000\020\003" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\001\002\000\004\035\035\001\002\000\020\003\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002" +
    "\000\004\021\026\001\002\000\004\012\027\001\002\000" +
    "\006\036\030\040\031\001\002\000\004\035\032\001\002" +
    "\000\020\003\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\ufff6\001\002\000\004\011\025\001\002\000\020" +
    "\003\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\001\002\000\020\003\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\001\002\000\006\036\023\040" +
    "\024\001\002\000\004\007\103\001\002\000\020\002\001" +
    "\041\015\042\004\043\016\044\010\045\006\046\040\001" +
    "\002\000\004\037\070\001\002\000\020\003\uffff\041\uffff" +
    "\042\uffff\043\uffff\044\uffff\045\uffff\046\uffff\001\002\000" +
    "\004\037\046\001\002\000\020\002\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\001\002\000\020\003" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\001\002\000\020\002\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\001\002\000\004\035\047\001\002" +
    "\000\012\005\uffeb\011\025\036\023\040\024\001\002\000" +
    "\004\005\051\001\002\000\016\006\052\041\015\042\004" +
    "\043\016\044\010\045\006\001\002\000\004\007\uffe7\001" +
    "\002\000\004\007\uffea\001\002\000\004\037\055\001\002" +
    "\000\004\035\056\001\002\000\006\006\uffe6\036\uffe6\001" +
    "\002\000\006\006\uffe2\036\060\001\002\000\014\041\015" +
    "\042\004\043\016\044\010\045\006\001\002\000\004\006" +
    "\062\001\002\000\004\007\uffe5\001\002\000\004\037\064" +
    "\001\002\000\004\035\065\001\002\000\006\006\uffe4\036" +
    "\uffe4\001\002\000\006\006\uffe2\036\060\001\002\000\004" +
    "\006\uffe3\001\002\000\004\035\071\001\002\000\004\005" +
    "\uffe9\001\002\000\004\005\073\001\002\000\016\006\052" +
    "\041\015\042\004\043\016\044\010\045\006\001\002\000" +
    "\004\007\uffe8\001\002\000\004\037\077\001\002\000\020" +
    "\002\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\001\002\000\004\035\100\001\002\000\004\005\uffeb" +
    "\001\002\000\020\002\uffe0\041\uffe0\042\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\001\002\000\020\002\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\001\002\000" +
    "\034\003\123\010\125\025\115\030\112\031\120\032\106" +
    "\033\126\035\116\041\015\042\004\043\016\044\010\045" +
    "\006\001\002\000\032\003\123\025\115\030\112\031\120" +
    "\032\106\033\126\035\116\041\015\042\004\043\016\044" +
    "\010\045\006\001\002\000\022\003\uffd6\010\uffd6\025\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\001\002\000" +
    "\004\035\237\001\002\000\022\003\123\010\235\025\115" +
    "\030\112\031\120\032\106\033\126\035\116\001\002\000" +
    "\022\003\uffd7\010\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\035\uffd7\001\002\000\022\003\uffd4\010\uffd4\025" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4\001\002" +
    "\000\004\005\230\001\002\000\022\003\uffd3\010\uffd3\025" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\001\002" +
    "\000\022\003\uffd1\010\uffd1\025\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\035\uffd1\001\002\000\004\005\220\001\002" +
    "\000\010\011\171\013\uffce\014\uffce\001\002\000\004\037" +
    "\163\001\002\000\004\007\134\001\002\000\032\003\uffdc" +
    "\025\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\001\002\000\022" +
    "\003\uffd2\010\uffd2\025\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\035\uffd2\001\002\000\006\010\131\040\132\001\002" +
    "\000\022\003\uffd5\010\uffd5\025\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\035\uffd5\001\002\000\042\002\uffde\003\uffde" +
    "\010\uffde\025\uffde\026\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\035\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\001\002\000\004\023\127\001\002\000\004\040" +
    "\130\001\002\000\022\003\uffbb\010\uffbb\025\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\035\uffbb\001\002\000\022\003" +
    "\uffcf\010\uffcf\025\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\035\uffcf\001\002\000\022\003\uffd0\010\uffd0\025\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\001\002\000\004" +
    "\030\135\001\002\000\022\003\123\010\125\025\115\030" +
    "\112\031\120\032\106\033\126\035\116\001\002\000\004" +
    "\005\136\001\002\000\016\020\151\021\143\022\145\023" +
    "\137\024\142\035\147\001\002\000\014\006\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\040\uffc1\001\002\000\006\006\uffb5\017" +
    "\160\001\002\000\004\006\156\001\002\000\014\006\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\040\uffbd\001\002\000\014\006" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\040\uffc0\001\002\000\004" +
    "\016\152\001\002\000\014\006\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\040\uffbf\001\002\000\006\006\uffb2\017\uffb2\001\002" +
    "\000\006\006\uffb4\016\uffb0\001\002\000\004\016\uffaf\001" +
    "\002\000\014\006\uffbe\015\uffbe\016\uffbe\017\uffbe\040\uffbe" +
    "\001\002\000\016\020\151\021\143\022\145\023\137\024" +
    "\142\035\153\001\002\000\006\006\uffae\017\uffae\001\002" +
    "\000\006\006\uffad\017\uffad\001\002\000\006\006\uffb1\017" +
    "\uffb1\001\002\000\004\040\157\001\002\000\022\003\uffb7" +
    "\010\uffb7\025\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\035" +
    "\uffb7\001\002\000\016\020\151\021\143\022\145\023\137" +
    "\024\142\035\162\001\002\000\006\006\uffb3\017\uffb3\001" +
    "\002\000\004\016\uffb0\001\002\000\004\035\164\001\002" +
    "\000\006\036\166\040\167\001\002\000\032\003\uffdb\025" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\001\002\000\004\035" +
    "\164\001\002\000\032\003\uffda\025\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\035\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\001\002\000\032\003\uffd9\025\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\035\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\001\002\000\004\021\214\001\002" +
    "\000\006\013\174\014\173\001\002\000\004\040\213\001" +
    "\002\000\020\005\177\020\151\021\143\022\145\023\137" +
    "\024\142\035\176\001\002\000\022\003\uffcd\010\uffcd\025" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\001\002" +
    "\000\010\014\212\015\uffc3\040\uffc3\001\002\000\020\005" +
    "\177\020\151\021\143\022\145\023\137\024\142\035\205" +
    "\001\002\000\010\006\uffc2\015\uffc2\040\uffc2\001\002\000" +
    "\004\040\207\001\002\000\010\006\uffc5\015\uffc5\040\uffc5" +
    "\001\002\000\006\015\204\040\uffc7\001\002\000\020\005" +
    "\177\020\151\021\143\022\145\023\137\024\142\035\205" +
    "\001\002\000\010\006\uffc3\015\uffc3\040\uffc3\001\002\000" +
    "\010\006\uffc6\015\uffc6\040\uffc6\001\002\000\022\003\uffc9" +
    "\010\uffc9\025\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\035" +
    "\uffc9\001\002\000\006\006\211\015\204\001\002\000\010" +
    "\006\uffc4\015\uffc4\040\uffc4\001\002\000\004\040\uffc8\001" +
    "\002\000\022\003\uffca\010\uffca\025\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\035\uffca\001\002\000\004\012\215\001" +
    "\002\000\006\013\uffcc\014\uffcc\001\002\000\006\013\174" +
    "\014\173\001\002\000\022\003\uffcb\010\uffcb\025\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\035\uffcb\001\002\000\016" +
    "\020\151\021\143\022\145\023\137\024\142\035\147\001" +
    "\002\000\004\006\222\001\002\000\004\027\223\001\002" +
    "\000\004\007\134\001\002\000\024\003\uffb8\010\uffb8\025" +
    "\uffb8\026\225\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8" +
    "\001\002\000\004\007\134\001\002\000\022\003\uffba\010" +
    "\uffba\025\uffba\030\uffba\031\uffba\032\uffba\033\uffba\035\uffba" +
    "\001\002\000\022\003\uffb9\010\uffb9\025\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\035\uffb9\001\002\000\016\020\151" +
    "\021\143\022\145\023\137\024\142\035\147\001\002\000" +
    "\004\006\232\001\002\000\004\031\233\001\002\000\004" +
    "\007\134\001\002\000\022\003\uffb6\010\uffb6\025\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\001\002\000\042" +
    "\002\uffdf\003\uffdf\010\uffdf\025\uffdf\026\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\035\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\001\002\000\022\003\uffd8\010" +
    "\uffd8\025\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8" +
    "\001\002\000\004\040\240\001\002\000\022\003\uffbc\010" +
    "\uffbc\025\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc" +
    "\001\002\000\022\003\123\010\243\025\115\030\112\031" +
    "\120\032\106\033\126\035\116\001\002\000\032\003\uffdd" +
    "\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\001\002\000\020" +
    "\002\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\014\002\004\003\006\005\012\006\010\010" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\036\005\041\006\040\010\043\012" +
    "\044\013\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\017\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\101\017\100\001\001\000\010\005\074\012\075\013\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\017\011\021\001\001\000\004\046\047\001" +
    "\001\000\002\001\001\000\006\005\053\014\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\056\001\001\000\004\015\060" +
    "\001\001\000\004\005\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\065\001\001\000\004\015\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\071\001\001\000\002" +
    "\001\001\000\006\005\053\014\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\116\020\103\021\120\023\106\024\107" +
    "\025\104\033\123\034\110\035\112\037\121\040\113\001" +
    "\001\000\026\005\116\021\241\023\240\024\107\025\104" +
    "\033\123\034\110\035\112\037\121\040\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\024\235\025\104" +
    "\033\123\034\110\035\112\037\121\040\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\171\001\001\000\002\001\001\000\004\017\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\106\024\107\025\104" +
    "\033\123\034\110\035\112\037\121\040\113\001\001\000" +
    "\002\001\001\000\014\032\147\041\140\042\137\043\145" +
    "\044\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\153" +
    "\045\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\147\043\160\044\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\174" +
    "\001\001\000\002\001\001\000\012\027\200\030\202\031" +
    "\201\032\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\207\031\201\032\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\205\032\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\215\001\001\000\004\026\216\001\001" +
    "\000\002\001\001\000\014\032\147\041\220\042\137\043" +
    "\145\044\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\223\001\001\000\004\036\225\001\001\000" +
    "\004\017\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\032\147\041\230\042\137\043\145\044\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\024\235" +
    "\025\104\033\123\034\110\035\112\037\121\040\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error( Symbol s ){
	System.out.println("ERROR SINTACTICO. Linea: " + s.left+", columna: " + s.right );
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception{
	System.out.println("ERROR SINTACTICO. El sistema no se pudo recuperar, linea");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


	Programa programa=new Programa();
	int tipo,valor;
	int funcion=-1;
	
	public void buscar_id(String id,int func,int linea){
		int aux= programa.buscarID(id,func);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no ha sido declarado");
		}else{
			tipo=aux;
		}
	}
	
	public void buscar_v(String id,int tamano,int linea){
		int aux=programa.buscar_vectores(id);
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El arreglo \""+id+"\" no ha sido declarado");
		}else{
			DeclaracionVector vect_aux=programa.vectores.get(aux);
			tipo=vect_aux.tipo;			
			if(vect_aux.tamano<=tamano){
				System.out.println("ERROR en linea:"+linea+". Se ha excedido el tamano del arreglo \""+id+"\".");
			}
		}
	}
	
	public void insertar_funciones(String id,int linea){
		if(programa.buscar_funcion(id)==-1){
			programa.funciones.add(new Funcion(tipo, id));
			funcion++;
		}else{
			System.out.println("ERROR en linea:"+linea+". La funcion \""+id+"()\" ya ha sido declarada antes");
		}
		
		
	}
	public void buscar_id_atrib(String id,int func,int linea){
		int aux= programa.buscarID(id,func);			
		if(aux==-1){
			System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no ha sido declarado");
		}else{			
			if(tipo==sym.INT||tipo==sym.FLOAT||tipo==sym.BOOL){				
				if(aux==sym.STRING){
					System.out.println("ERROR en linea:"+linea+", identificador \""+id+"\". No hay induccion para variables de tipo String.");
				}else{
					if(aux==sym.CHAR){					
						System.out.println("ERROR en linea:"+linea+", identificador \""+id+"\". No hay induccion para variables de tipo char.");					
					}
				}
			}else{
				if(tipo==sym.STRING){
					if(aux!=sym.STRING){
						System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no es de tipo String.");
					}
				}else{
					if(aux!=sym.CHAR){
						System.out.println("ERROR en linea:"+linea+". El identificador \""+id+"\" no es de tipo char.");
					}
				}
			}
		}
	}
	
	public void verificar_valor(int linea, int columna){
		switch(valor){
		case sym.INT:
			if(tipo!=sym.INT){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo int es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.FLOAT:
			if(tipo!=sym.FLOAT){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo float es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.BOOL:
			if(tipo!=sym.BOOL){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo bool es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.CHAR:
			if(tipo!=sym.CHAR){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo char es incompatible con el tipo de variable del identificador.");
			}
		break;
		case sym.STRING:
			if(tipo!=sym.STRING){
				System.out.println("ERROR en linea:"+linea+", columna:"+columna+". El valor que se asigna de tipo String es incompatible con el tipo de variable del identificador.");	
			}
		break;
		
		}
	}
	
	public void verif_funcion(int ind,int linea){
		if(programa.funciones.get(ind).var_param.isEmpty()){
			System.out.println("ERROR. en linea:"+linea+". La funcion es de tipo void y no debe retornar nada.");
		}
	}
	

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COMP2 ::= VAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMP2 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
			int aux=programa.buscarID(r,funcion);
			if(aux==-1){
				System.out.println("ERROR en linea:"+rleft+". El identificador \""+r+"\" no ha sido declarado");
			}else{
				valor=aux;
			}
		
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COMP1 ::= VAL 
            {
              Object RESULT =null;
		 tipo=valor; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COMP1 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 buscar_id(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COMP ::= COMP1 OP_COMP COMP2 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 if(tipo!=valor){System.out.println("ERROR. en linea"+rleft+". Variables de tipo incompatible");} 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMP",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPR_F1 ::= COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F1",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPR_F1 ::= EXPR_F1 OP_COMP_L COMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F1",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPR_F ::= ID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPR_F ::= EXPR_F1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPR_F",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // C_FLUJO_WHILE ::= WHILE PAR_AB EXPR_F PAR_CER DO BLOQUE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_WHILE",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // C_FLUJO_DOWHILE ::= DO BLOQUE1 WHILE PAR_AB EXPR_F PAR_CER END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_DOWHILE",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // C_FLUJO_ELSE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // C_FLUJO_ELSE ::= ELSE BLOQUE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // C_FLUJO_IF ::= IF PAR_AB EXPR_F PAR_CER THEN BLOQUE1 C_FLUJO_ELSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("C_FLUJO_IF",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPR_OUT ::= OUTPUT CADENA END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_OUT",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPR_IN ::= INPUT ID END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 buscar_id(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OPR_IN",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VAL ::= BOOLEANO 
            {
              Object RESULT =null;
		 valor=sym.BOOL; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAL ::= CARACTER 
            {
              Object RESULT =null;
		 valor=sym.CHAR; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;
		 valor=sym.FLOAT; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL ::= ENTERO 
            {
              Object RESULT =null;
		 valor=sym.INT; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAL ::= CADENA 
            {
              Object RESULT =null;
		 valor=sym.STRING; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= VAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 verificar_valor(rleft,rright); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // F ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 buscar_id_atrib(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // F ::= PAR_AB E PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E OP_BINARIO F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= ID OP_UNARIO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 buscar_id_atrib(r,funcion,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUCIONES1 ::= IGUAL EXPRESION END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIBUCIONES1 ::= OP_UNARIO END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUCIONES ::= ID COR_AB ENTERO COR_CER NT$5 ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$5 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 buscar_v(r1,(int)r2,r1left); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUCIONES ::= ID NT$4 ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$4 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 buscar_id(r,funcion,rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMANDOS1 ::= error LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMANDOS1 ::= error END 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMANDOS1 ::= C_FLUJO_DOWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMANDOS1 ::= C_FLUJO_WHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMANDOS1 ::= C_FLUJO_IF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMANDOS1 ::= OPR_OUT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMANDOS1 ::= OPR_IN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMANDOS1 ::= ATRIBUCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMANDOS ::= COMANDOS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMANDOS ::= COMANDOS COMANDOS1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC_L2 ::= ID COMA DEC_L2 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC_L2 ::= ID END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		 programa.funciones.get(funcion).insertar_vlocales(tipo, r, rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC_L1 ::= TIPO DOSPUN DEC_L2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L1",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC_L ::= DEC_L1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_L ::= DEC_L DEC_L1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BLOQUE1 ::= LLAV_AB LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE1 ::= LLAV_AB COMANDOS LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE ::= BLOQUE1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE ::= LLAV_AB DEC_L COMANDOS LLAV_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ENCAB1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ENCAB1 ::= COMA TIPO DOSPUN ID NT$3 ENCAB1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENCAB ::= TIPO DOSPUN ID NT$2 ENCAB1 PAR_CER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 programa.funciones.get(funcion).insertar_vparam(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENCAB ::= PAR_CER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= VOID DOSPUN ID NT$1 PAR_AB ENCAB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$1 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
insertar_funciones(r,rleft); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= TIPO DOSPUN ID NT$0 PAR_AB ENCAB 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 insertar_funciones(r,rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= FUNC BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= STRING 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= BOOL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= FLOAT 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= INT 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		int r = (int)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipo=r; 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC_V1 ::= ID COR_AB ENTERO COR_CER COMA DEC_V1 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		  programa.insertar_vectores(tipo,r1,(int) r2,r1left); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_V1 ::= ID COR_AB ENTERO COR_CER END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object r2 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		  programa.insertar_vectores(tipo,r1,(int) r2,r1left);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_V ::= TIPO DOSPUN DEC_V1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_V",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEC_G1 ::= ID COMA DEC_G1 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		programa.insertar_vglobales(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC_G1 ::= ID END 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		programa.insertar_vglobales(tipo, r, rleft);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC_G ::= TIPO DOSPUN DEC_G1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DEC_G",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DEC_V 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACIONES DEC_V 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DEC_G 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES ::= DECLARACIONES DEC_G 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

