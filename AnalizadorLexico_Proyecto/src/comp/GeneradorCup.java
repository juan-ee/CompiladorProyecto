
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 16 13:43:18 GMT-05:00 2016
//----------------------------------------------------

package comp;

import java.io.*;
import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 16 13:43:18 GMT-05:00 2016
  */
public class GeneradorCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GeneradorCup() {super();}

  /** Constructor which sets the default scanner. */
  public GeneradorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeneradorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\006\005\000\002\007\004\000" +
    "\002\054\002\000\002\007\006\000\002\010\005\000\002" +
    "\011\007\000\002\055\002\000\002\011\011\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\056\002\000\002\012\005\000\002" +
    "\013\007\000\002\013\007\000\002\014\003\000\002\014" +
    "\007\000\002\015\007\000\002\015\002\000\002\016\007" +
    "\000\002\016\003\000\002\017\005\000\002\017\004\000" +
    "\002\020\004\000\002\020\003\000\002\021\005\000\002" +
    "\022\004\000\002\057\002\000\002\022\006\000\002\023" +
    "\004\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\004\000\002" +
    "\024\004\000\002\060\002\000\002\025\005\000\002\061" +
    "\002\000\002\025\010\000\002\062\002\000\002\026\005" +
    "\000\002\026\005\000\002\027\004\000\002\027\003\000" +
    "\002\030\003\000\002\063\002\000\002\030\006\000\002" +
    "\030\003\000\002\030\005\000\002\031\003\000\002\031" +
    "\003\000\002\052\003\000\002\052\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\005\000\002\034" +
    "\005\000\002\035\004\000\002\035\002\000\002\036\004" +
    "\000\002\036\004\000\002\064\002\000\002\037\012\000" +
    "\002\065\002\000\002\040\005\000\002\040\002\000\002" +
    "\066\002\000\002\067\002\000\002\042\013\000\002\070" +
    "\002\000\002\041\011\000\002\043\003\000\002\043\003" +
    "\000\002\044\005\000\002\044\003\000\002\071\002\000" +
    "\002\045\006\000\002\046\003\000\002\046\003\000\002" +
    "\047\003\000\002\047\003\000\002\050\007\000\002\050" +
    "\006\000\002\051\003\000\002\051\005\000\002\051\003" +
    "\000\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\016\003\012\045\015\046\004\047\016\050" +
    "\010\051\006\001\002\000\004\043\ufff2\001\002\000\004" +
    "\002\306\001\002\000\004\043\uffef\001\002\000\020\003" +
    "\046\045\015\046\004\047\016\050\010\051\006\052\043" +
    "\001\002\000\004\043\uffee\001\002\000\020\003\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002" +
    "\000\004\044\040\001\002\000\004\043\017\001\002\000" +
    "\020\003\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\001\002\000\004\043\ufff0\001\002\000\004\043" +
    "\ufff1\001\002\000\004\041\021\001\002\000\020\003\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001" +
    "\002\000\010\011\025\042\023\044\024\001\002\000\020" +
    "\003\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\001\002\000\004\041\ufff8\001\002\000\020\003\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\001" +
    "\002\000\004\025\026\001\002\000\004\012\027\001\002" +
    "\000\006\042\030\044\031\001\002\000\004\041\ufff4\001" +
    "\002\000\020\003\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\001\002\000\004\041\033\001\002\000" +
    "\004\011\025\001\002\000\020\003\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\001\002\000\004\041" +
    "\037\001\002\000\020\003\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\001\002\000\006\042\023\044" +
    "\024\001\002\000\020\003\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\001\002\000\004\007\uffea\001" +
    "\002\000\020\002\001\045\015\046\004\047\016\050\010" +
    "\051\006\052\043\001\002\000\004\043\070\001\002\000" +
    "\020\003\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\001\002\000\004\043\051\001\002\000\020\002" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\001\002\000\020\002\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\001\002\000\020\003\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000" +
    "\004\041\052\001\002\000\012\005\053\011\025\042\023" +
    "\044\024\001\002\000\016\006\054\045\015\046\004\047" +
    "\016\050\010\051\006\001\002\000\004\007\uffe6\001\002" +
    "\000\004\007\uffe8\001\002\000\004\043\057\001\002\000" +
    "\004\041\060\001\002\000\006\006\uffe3\042\061\001\002" +
    "\000\014\045\015\046\004\047\016\050\010\051\006\001" +
    "\002\000\004\006\063\001\002\000\004\007\uffe5\001\002" +
    "\000\004\043\065\001\002\000\004\041\066\001\002\000" +
    "\006\006\uffe3\042\061\001\002\000\004\006\uffe4\001\002" +
    "\000\004\041\071\001\002\000\004\005\072\001\002\000" +
    "\016\006\054\045\015\046\004\047\016\050\010\051\006" +
    "\001\002\000\004\007\uffe7\001\002\000\004\043\076\001" +
    "\002\000\020\002\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\001\002\000\004\041\077\001\002\000" +
    "\004\005\053\001\002\000\004\007\103\001\002\000\020" +
    "\002\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\001\002\000\020\002\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\001\002\000\034\003\124\010" +
    "\126\031\116\034\112\035\121\036\106\037\127\041\117" +
    "\045\015\046\004\047\016\050\010\051\006\001\002\000" +
    "\032\003\124\031\116\034\112\035\121\036\106\037\127" +
    "\041\117\045\015\046\004\047\016\050\010\051\006\001" +
    "\002\000\024\003\uffd6\010\uffd6\031\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\001\002\000\004\041" +
    "\272\001\002\000\022\003\124\010\270\031\116\034\112" +
    "\035\121\036\106\037\127\041\117\001\002\000\024\003" +
    "\uffd7\010\uffd7\031\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\001\002\000\024\003\uffd0\010\uffd0\031" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\001\002\000\004\005\uffa4\001\002\000\024\003\uffd4\010" +
    "\uffd4\031\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\001\002\000\024\003\uffd3\010\uffd3\031\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\001\002" +
    "\000\024\003\uffd1\010\uffd1\031\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\001\002\000\004\005\uffac" +
    "\001\002\000\014\005\176\011\uffcb\013\uffcd\016\uffcd\017" +
    "\uffcd\001\002\000\004\043\167\001\002\000\004\007\uffa7" +
    "\001\002\000\032\003\uffdd\031\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\041\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\001\002\000\024\003\uffd2\010\uffd2\031\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002" +
    "\000\006\010\132\044\133\001\002\000\024\003\uffd5\010" +
    "\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\001\002\000\044\002\uffdf\003\uffdf\010\uffdf\031" +
    "\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\001\002\000\004\030\130\001\002\000\004\044\131" +
    "\001\002\000\024\003\uffb1\010\uffb1\031\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\001\002\000\024" +
    "\003\uffce\010\uffce\031\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\001\002\000\024\003\uffcf\010\uffcf" +
    "\031\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\001\002\000\004\007\136\001\002\000\004\034\137" +
    "\001\002\000\022\003\124\010\126\031\116\034\112\035" +
    "\121\036\106\037\127\041\117\001\002\000\004\005\uffa6" +
    "\001\002\000\004\005\141\001\002\000\016\024\150\025" +
    "\146\026\154\027\144\030\142\041\152\001\002\000\024" +
    "\006\uffb7\014\uffb7\015\uffb7\020\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\042\uffb7\044\uffb7\001\002\000\006\006\uffa2\015\164" +
    "\001\002\000\024\006\uffb3\014\uffb3\015\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\042\uffb3\044\uffb3\001\002\000\004" +
    "\006\162\001\002\000\024\006\uffb6\014\uffb6\015\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\042\uffb6\044\uffb6\001\002" +
    "\000\004\014\155\001\002\000\024\006\uffb5\014\uffb5\015" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\042\uffb5\044\uffb5" +
    "\001\002\000\006\006\uff9f\015\uff9f\001\002\000\006\006" +
    "\uffa1\014\uff9c\001\002\000\004\014\uff9b\001\002\000\024" +
    "\006\uffb4\014\uffb4\015\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\042\uffb4\044\uffb4\001\002\000\016\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\041\uff9e\001\002\000\016\024" +
    "\150\025\146\026\154\027\144\030\142\041\157\001\002" +
    "\000\006\006\uff9a\015\uff9a\001\002\000\006\006\uff99\015" +
    "\uff99\001\002\000\006\006\uff9d\015\uff9d\001\002\000\004" +
    "\044\163\001\002\000\024\003\uffa5\010\uffa5\031\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\001\002" +
    "\000\016\024\150\025\146\026\154\027\144\030\142\041" +
    "\166\001\002\000\006\006\uffa0\015\uffa0\001\002\000\004" +
    "\014\uff9c\001\002\000\004\041\170\001\002\000\006\042" +
    "\172\044\173\001\002\000\032\003\uffdc\031\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\041\uffdc\045\uffdc\046\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\001\002\000\004\041\uffda\001\002" +
    "\000\032\003\uffdb\031\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\041\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\001\002\000\004\041\170\001\002\000\032\003\uffd9\031" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\001\002\000\020\006" +
    "\235\024\150\025\146\026\154\027\144\030\142\041\236" +
    "\001\002\000\004\011\231\001\002\000\010\013\203\016" +
    "\202\017\205\001\002\000\004\044\uffc9\001\002\000\004" +
    "\044\uffbd\001\002\000\016\024\150\025\146\026\154\027" +
    "\144\030\142\041\206\001\002\000\024\003\uffcc\010\uffcc" +
    "\031\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\001\002\000\004\044\uffbc\001\002\000\020\016\202" +
    "\017\205\020\uffc3\021\uffc3\022\uffc3\023\uffc3\044\uffc4\001" +
    "\002\000\014\020\214\021\215\022\217\023\216\044\uffc1" +
    "\001\002\000\004\044\212\001\002\000\004\044\uffc5\001" +
    "\002\000\024\003\uffc7\010\uffc7\031\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\001\002\000\004\041" +
    "\220\001\002\000\016\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\041\uffb9\001\002\000\016\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\041\uffb8\001\002\000\016\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\041\uffba\001\002\000" +
    "\016\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\041\uffbb" +
    "\001\002\000\004\044\uffc0\001\002\000\004\044\uffc6\001" +
    "\002\000\012\020\214\021\215\022\217\023\216\001\002" +
    "\000\016\024\150\025\146\026\154\027\144\030\142\041" +
    "\224\001\002\000\004\044\uffbf\001\002\000\004\044\uffc2" +
    "\001\002\000\004\044\uffbe\001\002\000\004\044\230\001" +
    "\002\000\024\003\uffc8\010\uffc8\031\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002\000\004\025" +
    "\232\001\002\000\004\012\233\001\002\000\010\013\203" +
    "\016\202\017\205\001\002\000\024\003\uffca\010\uffca\031" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\001\002\000\004\044\247\001\002\000\006\006\uff96\042" +
    "\245\001\002\000\006\006\uff94\042\243\001\002\000\004" +
    "\006\241\001\002\000\004\044\242\001\002\000\024\003" +
    "\uff98\010\uff98\031\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\001\002\000\016\024\150\025\146\026" +
    "\154\027\144\030\142\041\236\001\002\000\004\006\uff93" +
    "\001\002\000\016\024\150\025\146\026\154\027\144\030" +
    "\142\041\236\001\002\000\004\006\uff95\001\002\000\024" +
    "\003\uff97\010\uff97\031\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\001\002\000\004\005\251\001\002" +
    "\000\016\024\150\025\146\026\154\027\144\030\142\041" +
    "\152\001\002\000\004\006\253\001\002\000\004\033\254" +
    "\001\002\000\004\007\136\001\002\000\026\003\uffa8\010" +
    "\uffa8\031\uffa8\032\256\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\001\002\000\004\007\uffaa\001\002\000" +
    "\024\003\uffab\010\uffab\031\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\001\002\000\004\007\136\001" +
    "\002\000\024\003\uffa9\010\uffa9\031\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\001\002\000\004\005" +
    "\263\001\002\000\016\024\150\025\146\026\154\027\144" +
    "\030\142\041\152\001\002\000\004\006\265\001\002\000" +
    "\004\035\266\001\002\000\004\007\136\001\002\000\024" +
    "\003\uffa3\010\uffa3\031\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\001\002\000\044\002\uffe0\003\uffe0" +
    "\010\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\001\002\000\024\003\uffd8\010\uffd8\031" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\001\002\000\004\044\273\001\002\000\024\003\uffb2\010" +
    "\uffb2\031\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\001\002\000\024\003\124\010\uffaf\031\116\034" +
    "\112\035\121\036\106\037\127\040\277\041\117\001\002" +
    "\000\032\003\uffde\031\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\041\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\001\002\000\004\010\305\001\002\000\016\024\150\025" +
    "\146\026\154\027\144\030\142\041\300\001\002\000\004" +
    "\044\304\001\002\000\004\010\uffb0\001\002\000\004\044" +
    "\303\001\002\000\004\010\uffad\001\002\000\004\010\uffae" +
    "\001\002\000\020\002\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\014\002\004\003\006\005\012\006\010\010" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\041\005\044\006\043\010\047\012" +
    "\046\013\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\017\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\031\001\001\000\002\001\001\000\004\011\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\077\001\001\000\010\005\073\012\074\013" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\017\011\021\001\001\000\002\001\001" +
    "\000\006\005\055\014\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\061\001\001\000\004\005\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\055\014\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\101\017\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\117\020\103\021\121\023\106\024\107\025\104\033\124" +
    "\034\112\037\113\041\122\042\114\050\110\001\001\000" +
    "\030\005\117\021\274\023\273\024\107\025\104\033\124" +
    "\034\112\037\113\041\122\042\114\050\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\024\270\025\104" +
    "\033\124\034\112\037\113\041\122\042\114\050\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\247\001\001\000\006\060\177\061\176" +
    "\001\001\000\002\001\001\000\004\066\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\134\001\001\000\002\001\001\000\024\023" +
    "\106\024\107\025\104\033\124\034\112\037\113\041\122" +
    "\042\114\050\110\001\001\000\004\067\137\001\001\000" +
    "\002\001\001\000\014\032\152\043\144\044\142\045\150" +
    "\046\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\155" +
    "\001\001\000\006\032\157\047\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\152\045\164\046\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\173\001\001\000\002\001\001\000\004\022\174\001\001" +
    "\000\002\001\001\000\006\032\236\051\237\001\001\000" +
    "\002\001\001\000\006\026\203\052\200\001\001\000\004" +
    "\062\226\001\001\000\002\001\001\000\010\027\207\030" +
    "\210\032\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\220\063\221\001\001\000\004\053\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\222\001\001\000\006\031\224\032" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\233\052\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\236\051\243\001\001\000\002\001" +
    "\001\000\006\032\236\051\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\152\043" +
    "\251\044\142\045\150\046\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\254\001\001\000\004\040" +
    "\256\001\001\000\004\065\257\001\001\000\002\001\001" +
    "\000\004\017\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\032\152\043\263\044\142\045\150\046\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\270\025\104\033\124\034\112\035\275\037\113\041\122" +
    "\042\114\050\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\301\036\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeneradorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeneradorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeneradorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GeneradorCup$actions {



String comparar;
boolean band;
String r1,r2,r3;
int tipo,op_un;
String val,oper;
ArrayList<Registro> registros=new ArrayList<>();

ArrayList<String> gen=new ArrayList<>();	
			
public void escribir(){

try {			
			PrintWriter salida=new PrintWriter(new FileWriter("salida.txt"));
			for(String s:gen){
				salida.println(s);
			}
			salida.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
}

int pos=1;
public void declarar(String id){
	Registro reg_aux=new Registro(id,"$reg"+pos);	
	pos++;	
	registros.add(reg_aux);	
	gen.add("store "+id+" ==> "+reg_aux.reg);	
}

public void op_unario(){
	if(op_un==GeneradorSym.OP_UNARIO_MAS){
		gen.add("addI "+r1+", 1 ==> "+r1);
	}else{
		gen.add("subI "+r1+", 1 ==> "+r1);
	}
}

public void op_unario2(String id){
	if(op_un==GeneradorSym.OP_UNARIO_MAS){
		gen.add("addI "+id+", 1 ==> "+r1);
	}else{
		gen.add("subI "+id+", 1 ==> "+r1);
	}
}

public void load(){
	gen.add("load "+r2+" ==> "+r1);
}

public void loadI(){
	gen.add("loadI "+val+" ==> "+r1);
}

public void atrib(){
	gen.add(oper+" "+r2+", "+r3+" ==> "+r1);
}			

public void atrib2(){
	gen.add(oper+" "+r2+", "+val+" ==> "+r1);
}
		
public void atrib3(){
	gen.add(oper+" "+val+", "+r2+" ==> "+r1);
}

public String obt_reg(String id){
		for(Registro n:registros){
			if(n.id.equals(id)){
				return n.reg;
			}
		}
		return "";
}

public void asign_oper(){
		if(comparar.equals("<")){
			/*menor*/
			oper="cmp_LT";
		}else{
			if(comparar.equals("<=")){
				/*menor o igual*/
				oper="cmp_LE";
			}else{
				if(comparar.equals(">")){
					/*mayor*/
					oper="cmp_GT";
				}else{
					if(comparar.equals(">=")){
						/*mayor o igual*/
						oper="cmp_GE";
					}else{
						if(comparar.equals("==")){
							/*igual*/
							oper="cmp_EQ";
						}else{
							/*diferente*/
							oper="cmp_NE";
						}
					}
				}
			}
		}	
}

public void comparar1(){/*ID ID*/
	gen.add(oper +" "+ r1 +", "+r2+" ==> $t");
	
}
public void comparar2(){/*VAL ID*/
	oper+="I";
	gen.add(oper +" "+ val +", "+r2+" ==> $t");
}
public void comparar3(){/*ID VAL*/
	oper+="I";
	gen.add(oper +" "+ r1 +", "+val+" ==> $t");
	
	
}
public void comparar4(){/*VAL VAL*/
	oper+="I";
	gen.add(oper +" "+ val +", "+val+" ==> $t");
	
}

	

  private final GeneradorCup parser;

  /** Constructor */
  CUP$GeneradorCup$actions(GeneradorCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GeneradorCup$do_action(
    int                        CUP$GeneradorCup$act_num,
    java_cup.runtime.lr_parser CUP$GeneradorCup$parser,
    java.util.Stack            CUP$GeneradorCup$stack,
    int                        CUP$GeneradorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeneradorCup$result;

      /* select the action based on the action number */
      switch (CUP$GeneradorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAM_F1 ::= VAL COMA LLAM_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAM_F1 ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LLAM_F1 ::= ID COMA LLAM_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LLAM_F1 ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LLAM_F ::= ID PAR_AB PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LLAM_F ::= ID PAR_AB LLAM_F1 PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMP2 ::= VAL 
            {
              Object RESULT =null;
		 if(band){ comparar3(); }else{ comparar4(); }  
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMP2 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		 r2=obt_reg(r); if(band){ comparar1(); }else{ comparar2(); } 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COMP1 ::= VAL 
            {
              Object RESULT =null;
		 band=false; 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COMP1 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		 band=true; r1=obt_reg(r); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COMP ::= COMP1 OP_COMP NT$13 COMP2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP",35, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$13 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
 comparar=r+"";asign_oper(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$13",55, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPR_F1 ::= COMP 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPR_F1 ::= EXPR_F1 OP_COMP_L COMP 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPR_F ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPR_F ::= EXPR_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // C_FLUJO_WHILE ::= WHILE NT$12 PAR_AB EXPR_F PAR_CER DO BLOQUE1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_WHILE",31, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$12 ::= 
            {
              Object RESULT =null;
gen.add("WHILE_entry:");
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$12",54, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // C_FLUJO_DOWHILE ::= DO NT$10 BLOQUE1 WHILE NT$11 PAR_AB EXPR_F PAR_CER END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_DOWHILE",32, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-8)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).value;
gen.add("WHILE_entry:");
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$11",53, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$10 ::= 
            {
              Object RESULT =null;
gen.add("DO_entry:");
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$10",52, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // C_FLUJO_ELSE ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // C_FLUJO_ELSE ::= ELSE NT$9 BLOQUE1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$9 ::= 
            {
              Object RESULT =null;
gen.add("ELSE_entry:");
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$9",51, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // C_FLUJO_IF ::= IF NT$8 PAR_AB EXPR_F PAR_CER THEN BLOQUE1 C_FLUJO_ELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_IF",29, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-7)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$8 ::= 
            {
              Object RESULT =null;
gen.add("IF_entry:");
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$8",50, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPR_RTN1 ::= VAL END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPR_RTN1 ::= ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPR_RTN ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPR_RTN ::= RETURN OPR_RTN1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPR_OUT ::= OUTPUT CADENA END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_OUT",26, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPR_IN ::= INPUT ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_IN",25, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VAL ::= BOOLEANO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		 if(r.equals("true")){
						val="1";
					}else{
						val="0";
					}
				
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VAL ::= CARACTER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		val=""+(int)r.charAt(1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		val=r;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VAL ::= ENTERO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		val=r;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAL ::= CADENA 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_BINARIO ::= MENOS 
            {
              Object RESULT =null;
		oper="sub";
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_BINARIO",41, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_BINARIO ::= MAS 
            {
              Object RESULT =null;
		oper="add";
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_BINARIO",41, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_BINARIO ::= DIV 
            {
              Object RESULT =null;
		oper="div";
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_BINARIO",41, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_BINARIO ::= POR 
            {
              Object RESULT =null;
		oper="mult";
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_BINARIO",41, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_UNARIO ::= OP_UNARIO_MENOS 
            {
              Object RESULT =null;
		op_un=GeneradorSym.OP_UNARIO_MENOS;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",40, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_UNARIO ::= OP_UNARIO_MAS 
            {
              Object RESULT =null;
		op_un=GeneradorSym.OP_UNARIO_MAS;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",40, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E1 ::= VAL 
            {
              Object RESULT =null;
		oper+="I"; atrib2(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E1",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E1 ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		r3=obt_reg(r); atrib();
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E1",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= VAL OP_BINARIO ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		oper+="I"; atrib3(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= VAL 
            {
              Object RESULT =null;
		loadI();
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= ID NT$7 OP_BINARIO E1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$7 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
r2=obt_reg(r);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$7",49, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= ID 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
		r2=obt_reg(r);load();
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= ID OP_UNARIO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		op_unario2(r);r1=obt_reg(r); op_unario();
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATRIBUCIONES1 ::= IGUAL EXPRESION END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUCIONES1 ::= OP_UNARIO NT$6 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$6 ::= 
            {
              Object RESULT =null;
op_unario();
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$6",48, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIBUCIONES ::= ID NT$5 COR_AB ENTERO COR_CER ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$5 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
r1=obt_reg(r);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUCIONES ::= ID NT$4 ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$4 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
r1=obt_reg(r);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMANDOS1 ::= error LLAV_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMANDOS1 ::= error END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMANDOS1 ::= LLAM_F 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMANDOS1 ::= C_FLUJO_DOWHILE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMANDOS1 ::= C_FLUJO_WHILE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMANDOS1 ::= C_FLUJO_IF 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMANDOS1 ::= OPR_OUT 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMANDOS1 ::= OPR_IN 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMANDOS1 ::= ATRIBUCIONES 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMANDOS ::= COMANDOS1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMANDOS ::= COMANDOS COMANDOS1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEC_L2 ::= ID COMA NT$3 DEC_L2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEC_L2 ::= ID END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC_L1 ::= TIPO DOSPUN DEC_L2 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L1",15, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_L ::= DEC_L1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC_L ::= DEC_L DEC_L1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BLOQUE1 ::= LLAV_AB LLAV_CER 
            {
              Object RESULT =null;
		 escribir(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE1 ::= LLAV_AB COMANDOS LLAV_CER 
            {
              Object RESULT =null;
		 escribir(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE ::= BLOQUE1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE ::= LLAV_AB DEC_L COMANDOS OPR_RTN LLAV_CER 
            {
              Object RESULT =null;
		 escribir(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ENCAB1 ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ENCAB1 ::= COMA TIPO DOSPUN ID ENCAB1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENCAB ::= TIPO DOSPUN ID ENCAB1 PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENCAB ::= PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNC ::= VOID DOSPUN ID PAR_AB ENCAB 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= TIPO DOSPUN ID PAR_AB ENCAB 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= FUNC NT$2 BLOQUE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$2 ::= 
            {
              Object RESULT =null;
gen.add("MAIN_entry:");
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES ::= error 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= STRING 
            {
              Object RESULT =null;
		tipo=GeneradorSym.STRING;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= BOOL 
            {
              Object RESULT =null;
		tipo=GeneradorSym.BOOL;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		tipo=GeneradorSym.CHAR;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= FLOAT 
            {
              Object RESULT =null;
		tipo=GeneradorSym.FLOAT;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= INT 
            {
              Object RESULT =null;
		tipo=GeneradorSym.INT;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEC_V1 ::= ID COR_AB ENTERO COR_CER COMA NT$1 DEC_V1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).value;
declarar(r1); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC_V1 ::= ID COR_AB ENTERO COR_CER END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).value;
		declarar(r1); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_V ::= TIPO DOSPUN DEC_V1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V",6, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_G1 ::= ID COMA NT$0 DEC_G1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
declarar(r1); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC_G1 ::= ID END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		declarar(r1); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC_G ::= TIPO DOSPUN DEC_G1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G",4, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= error END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DEC_V 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACIONES DEC_V 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DEC_G 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES ::= DECLARACIONES DEC_G 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		RESULT = start_val;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeneradorCup$parser.done_parsing();
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

