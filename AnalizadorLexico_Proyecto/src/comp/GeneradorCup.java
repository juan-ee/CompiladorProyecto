
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 16 06:24:37 GMT-05:00 2016
//----------------------------------------------------

package comp;

import java.io.*;
import java.util.ArrayList;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 16 06:24:37 GMT-05:00 2016
  */
public class GeneradorCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GeneradorCup() {super();}

  /** Constructor which sets the default scanner. */
  public GeneradorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeneradorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\006\005\000\002\007\004\000" +
    "\002\054\002\000\002\007\006\000\002\010\005\000\002" +
    "\011\007\000\002\055\002\000\002\011\011\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\012\004\000\002\013\007\000\002" +
    "\013\007\000\002\014\003\000\002\014\007\000\002\015" +
    "\007\000\002\015\002\000\002\016\007\000\002\016\003" +
    "\000\002\017\005\000\002\017\004\000\002\020\004\000" +
    "\002\020\003\000\002\021\005\000\002\022\004\000\002" +
    "\056\002\000\002\022\006\000\002\023\004\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\004\000\002\024\004\000\002" +
    "\057\002\000\002\025\005\000\002\060\002\000\002\025" +
    "\010\000\002\061\002\000\002\026\005\000\002\026\005" +
    "\000\002\027\004\000\002\027\003\000\002\030\005\000" +
    "\002\030\003\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\052\003\000\002\052\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\004\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\033\005\000\002\034\005\000\002" +
    "\035\004\000\002\035\002\000\002\036\004\000\002\036" +
    "\004\000\002\037\011\000\002\040\004\000\002\040\002" +
    "\000\002\042\011\000\002\041\010\000\002\043\003\000" +
    "\002\043\003\000\002\044\005\000\002\044\003\000\002" +
    "\045\005\000\002\046\003\000\002\046\003\000\002\047" +
    "\003\000\002\047\003\000\002\050\007\000\002\050\006" +
    "\000\002\051\003\000\002\051\005\000\002\051\003\000" +
    "\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\016\003\012\045\015\046\004\047\016\050" +
    "\010\051\006\001\002\000\004\043\ufff2\001\002\000\004" +
    "\002\277\001\002\000\004\043\uffef\001\002\000\020\003" +
    "\046\045\015\046\004\047\016\050\010\051\006\052\043" +
    "\001\002\000\004\043\uffee\001\002\000\020\003\ufffe\045" +
    "\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002" +
    "\000\004\044\040\001\002\000\004\043\017\001\002\000" +
    "\020\003\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\001\002\000\004\043\ufff0\001\002\000\004\043" +
    "\ufff1\001\002\000\004\041\021\001\002\000\020\003\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\001" +
    "\002\000\010\011\025\042\023\044\024\001\002\000\020" +
    "\003\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\001\002\000\004\041\ufff8\001\002\000\020\003\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\001" +
    "\002\000\004\025\026\001\002\000\004\012\027\001\002" +
    "\000\006\042\030\044\031\001\002\000\004\041\ufff4\001" +
    "\002\000\020\003\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\001\002\000\004\041\033\001\002\000" +
    "\004\011\025\001\002\000\020\003\ufff3\045\ufff3\046\ufff3" +
    "\047\ufff3\050\ufff3\051\ufff3\052\ufff3\001\002\000\004\041" +
    "\037\001\002\000\020\003\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\001\002\000\006\042\023\044" +
    "\024\001\002\000\020\003\ufffb\045\ufffb\046\ufffb\047\ufffb" +
    "\050\ufffb\051\ufffb\052\ufffb\001\002\000\004\007\102\001" +
    "\002\000\020\002\001\045\015\046\004\047\016\050\010" +
    "\051\006\052\043\001\002\000\004\043\070\001\002\000" +
    "\020\003\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\001\002\000\004\043\051\001\002\000\020\002" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\001\002\000\020\002\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\001\002\000\020\003\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000" +
    "\004\041\052\001\002\000\012\005\053\011\025\042\023" +
    "\044\024\001\002\000\016\006\054\045\015\046\004\047" +
    "\016\050\010\051\006\001\002\000\004\007\uffe7\001\002" +
    "\000\004\007\uffe9\001\002\000\004\043\057\001\002\000" +
    "\004\041\060\001\002\000\006\006\uffe4\042\061\001\002" +
    "\000\014\045\015\046\004\047\016\050\010\051\006\001" +
    "\002\000\004\006\063\001\002\000\004\007\uffe6\001\002" +
    "\000\004\043\065\001\002\000\004\041\066\001\002\000" +
    "\006\006\uffe4\042\061\001\002\000\004\006\uffe5\001\002" +
    "\000\004\041\071\001\002\000\004\005\072\001\002\000" +
    "\016\006\054\045\015\046\004\047\016\050\010\051\006" +
    "\001\002\000\004\007\uffe8\001\002\000\004\043\076\001" +
    "\002\000\020\002\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\001\002\000\004\041\077\001\002\000" +
    "\004\005\053\001\002\000\020\002\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\uffe2\001\002\000\020\002" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea" +
    "\001\002\000\034\003\123\010\125\031\115\034\112\035" +
    "\120\036\105\037\126\041\116\045\015\046\004\047\016" +
    "\050\010\051\006\001\002\000\032\003\123\031\115\034" +
    "\112\035\120\036\105\037\126\041\116\045\015\046\004" +
    "\047\016\050\010\051\006\001\002\000\024\003\uffd7\010" +
    "\uffd7\031\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\001\002\000\004\041\263\001\002\000\022\003" +
    "\123\010\261\031\115\034\112\035\120\036\105\037\126" +
    "\041\116\001\002\000\024\003\uffd8\010\uffd8\031\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002" +
    "\000\024\003\uffd1\010\uffd1\031\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\001\002\000\024\003\uffd5" +
    "\010\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\001\002\000\004\005\254\001\002\000\024" +
    "\003\uffd4\010\uffd4\031\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\001\002\000\024\003\uffd2\010\uffd2" +
    "\031\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\001\002\000\004\005\244\001\002\000\014\005\173" +
    "\011\uffcc\013\uffce\016\uffce\017\uffce\001\002\000\004\043" +
    "\163\001\002\000\004\007\134\001\002\000\032\003\uffde" +
    "\031\uffde\034\uffde\035\uffde\036\uffde\037\uffde\041\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\001\002\000\024" +
    "\003\uffd3\010\uffd3\031\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\001\002\000\006\010\131\044\132" +
    "\001\002\000\024\003\uffd6\010\uffd6\031\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\001\002\000\044" +
    "\002\uffe0\003\uffe0\010\uffe0\031\uffe0\032\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\052\uffe0\001\002\000\004\027" +
    "\127\001\002\000\004\044\130\001\002\000\024\003\uffb5" +
    "\010\uffb5\031\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\001\002\000\024\003\uffcf\010\uffcf\031\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001" +
    "\002\000\024\003\uffd0\010\uffd0\031\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002\000\004\034" +
    "\135\001\002\000\022\003\123\010\125\031\115\034\112" +
    "\035\120\036\105\037\126\041\116\001\002\000\004\005" +
    "\136\001\002\000\016\024\151\025\144\026\145\027\137" +
    "\030\141\041\147\001\002\000\022\006\uffbb\014\uffbb\015" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\042\uffbb\044\uffbb\001\002" +
    "\000\006\006\uffab\015\160\001\002\000\022\006\uffb7\014" +
    "\uffb7\015\uffb7\020\uffb7\021\uffb7\022\uffb7\042\uffb7\044\uffb7" +
    "\001\002\000\004\006\156\001\002\000\004\014\152\001" +
    "\002\000\022\006\uffba\014\uffba\015\uffba\020\uffba\021\uffba" +
    "\022\uffba\042\uffba\044\uffba\001\002\000\022\006\uffb9\014" +
    "\uffb9\015\uffb9\020\uffb9\021\uffb9\022\uffb9\042\uffb9\044\uffb9" +
    "\001\002\000\006\006\uffa8\015\uffa8\001\002\000\006\006" +
    "\uffaa\014\uffa6\001\002\000\004\014\uffa5\001\002\000\022" +
    "\006\uffb8\014\uffb8\015\uffb8\020\uffb8\021\uffb8\022\uffb8\042" +
    "\uffb8\044\uffb8\001\002\000\016\024\151\025\144\026\145" +
    "\027\137\030\141\041\153\001\002\000\006\006\uffa4\015" +
    "\uffa4\001\002\000\006\006\uffa3\015\uffa3\001\002\000\006" +
    "\006\uffa7\015\uffa7\001\002\000\004\044\157\001\002\000" +
    "\024\003\uffad\010\uffad\031\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\001\002\000\016\024\151\025" +
    "\144\026\145\027\137\030\141\041\162\001\002\000\006" +
    "\006\uffa9\015\uffa9\001\002\000\004\014\uffa6\001\002\000" +
    "\004\041\164\001\002\000\006\042\166\044\167\001\002" +
    "\000\032\003\uffdd\031\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\041\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\001\002\000\004\041\uffdb\001\002\000\032\003\uffdc\031" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002\000\004\041" +
    "\164\001\002\000\032\003\uffda\031\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\041\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\001\002\000\010\013\202\016\201\017\204" +
    "\001\002\000\020\006\230\024\151\025\144\026\145\027" +
    "\137\030\141\041\231\001\002\000\004\011\175\001\002" +
    "\000\004\025\176\001\002\000\004\012\177\001\002\000" +
    "\010\013\202\016\201\017\204\001\002\000\004\044\uffca" +
    "\001\002\000\004\044\uffc0\001\002\000\020\005\206\024" +
    "\151\025\144\026\145\027\137\030\141\041\205\001\002" +
    "\000\024\003\uffcb\010\uffcb\031\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\001\002\000\004\044\uffbf" +
    "\001\002\000\016\016\201\017\204\020\uffc2\021\uffc2\022" +
    "\uffc2\044\uffc2\001\002\000\020\005\206\024\151\025\144" +
    "\026\145\027\137\030\141\041\220\001\002\000\014\006" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\044\uffc1\001\002\000\004" +
    "\044\222\001\002\000\014\006\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\044\uffc4\001\002\000\012\020\214\021\215\022\216" +
    "\044\uffc6\001\002\000\020\005\206\024\151\025\144\026" +
    "\145\027\137\030\141\041\220\001\002\000\020\005\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\041\uffbe\001" +
    "\002\000\020\005\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\041\uffbd\001\002\000\004\023\217\001\002\000" +
    "\020\005\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\041\uffbc\001\002\000\014\006\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\044\uffc2\001\002\000\014\006\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\044\uffc5\001\002\000\024\003\uffc8\010\uffc8\031" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\001\002\000\012\006\224\020\214\021\215\022\216\001" +
    "\002\000\014\006\uffc3\020\uffc3\021\uffc3\022\uffc3\044\uffc3" +
    "\001\002\000\004\044\uffc7\001\002\000\004\044\227\001" +
    "\002\000\024\003\uffc9\010\uffc9\031\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\001\002\000\004\044" +
    "\242\001\002\000\006\006\uffa0\042\240\001\002\000\006" +
    "\006\uff9e\042\236\001\002\000\004\006\234\001\002\000" +
    "\004\044\235\001\002\000\024\003\uffa2\010\uffa2\031\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\001" +
    "\002\000\016\024\151\025\144\026\145\027\137\030\141" +
    "\041\231\001\002\000\004\006\uff9d\001\002\000\016\024" +
    "\151\025\144\026\145\027\137\030\141\041\231\001\002" +
    "\000\004\006\uff9f\001\002\000\024\003\uffa1\010\uffa1\031" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\001\002\000\024\003\uffcd\010\uffcd\031\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\001\002\000\016" +
    "\024\151\025\144\026\145\027\137\030\141\041\147\001" +
    "\002\000\004\006\246\001\002\000\004\033\247\001\002" +
    "\000\004\007\134\001\002\000\026\003\uffae\010\uffae\031" +
    "\uffae\032\251\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\001\002\000\004\007\134\001\002\000\024\003" +
    "\uffb0\010\uffb0\031\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\001\002\000\024\003\uffaf\010\uffaf\031" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\001\002\000\016\024\151\025\144\026\145\027\137\030" +
    "\141\041\147\001\002\000\004\006\256\001\002\000\004" +
    "\035\257\001\002\000\004\007\134\001\002\000\024\003" +
    "\uffac\010\uffac\031\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\001\002\000\044\002\uffe1\003\uffe1\010" +
    "\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\001\002\000\024\003\uffd9\010\uffd9\031\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001" +
    "\002\000\004\044\264\001\002\000\024\003\uffb6\010\uffb6" +
    "\031\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\001\002\000\024\003\123\010\uffb3\031\115\034\112" +
    "\035\120\036\105\037\126\040\270\041\116\001\002\000" +
    "\032\003\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\041\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001" +
    "\002\000\004\010\276\001\002\000\016\024\151\025\144" +
    "\026\145\027\137\030\141\041\271\001\002\000\004\044" +
    "\275\001\002\000\004\010\uffb4\001\002\000\004\044\274" +
    "\001\002\000\004\010\uffb1\001\002\000\004\010\uffb2\001" +
    "\002\000\020\002\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\014\002\004\003\006\005\012\006\010\010" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\041\005\044\006\043\010\047\012" +
    "\046\013\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\017\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\031\001\001\000\002\001\001\000\004\011\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\100\017\077\001\001\000\010\005\073\012" +
    "\074\013\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\017\011\021\001\001\000\002" +
    "\001\001\000\006\005\055\014\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\061\001\001\000\004\005\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\055\014\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\116\020\102\021\120\023" +
    "\105\024\106\025\103\033\123\034\110\037\112\041\121" +
    "\042\113\050\107\001\001\000\030\005\116\021\265\023" +
    "\264\024\106\025\103\033\123\034\110\037\112\041\121" +
    "\042\113\050\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\024\261\025\103\033\123\034\110\037\112" +
    "\041\121\042\113\050\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\057" +
    "\171\060\173\001\001\000\002\001\001\000\004\017\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\023\105\024\106" +
    "\025\103\033\123\034\110\037\112\041\121\042\113\050" +
    "\107\001\001\000\002\001\001\000\014\032\147\043\141" +
    "\044\137\045\145\046\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\153\047\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\147\045\160\046\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\167\001" +
    "\001\000\002\001\001\000\004\022\170\001\001\000\002" +
    "\001\001\000\006\026\242\052\177\001\001\000\006\032" +
    "\231\051\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\202\052\177\001\001\000" +
    "\004\061\225\001\001\000\002\001\001\000\012\027\207" +
    "\030\211\031\210\032\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\224\001\001\000\010\030\222" +
    "\031\210\032\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\212\001\001\000\006" +
    "\031\220\032\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\231\051\236\001\001\000\002\001" +
    "\001\000\006\032\231\051\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\032\147\043" +
    "\244\044\137\045\145\046\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\247\001\001\000\004\040" +
    "\251\001\001\000\004\017\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\032\147\043\254\044\137\045" +
    "\145\046\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\024\261\025\103\033\123\034\110\035\266\037" +
    "\112\041\121\042\113\050\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\272\036\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeneradorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeneradorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeneradorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GeneradorCup$actions {



String r1;
int tipo,op_un;
ArrayList<String> gen=new ArrayList<>();	
			
public void escribir(){

try {			
			PrintWriter salida=new PrintWriter(new FileWriter("salida.txt"));
			for(String s:gen){
				salida.println(s);
			}
			salida.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
}

public void declarar(String id){	
	if(tipo==GeneradorSym.INT||tipo==GeneradorSym.FLOAT||tipo==GeneradorSym.BOOL){
		gen.add("storeAI "+id+" ==> 0");
	}	
}

public void op_unario(){
	if(op_un==GeneradorSym.OP_UNARIO_MAS){
		gen.add("addI "+r1+", 1 ==> "+r1);
	}else{
		gen.add("subI "+r1+", 1 ==> "+r1);
	}
}

public void op_unario2(String id){
	if(op_un==GeneradorSym.OP_UNARIO_MAS){
		gen.add("addI "+id+", 1 ==> "+r1);
	}else{
		gen.add("subI "+id+", 1 ==> "+r1);
	}
}
						

  private final GeneradorCup parser;

  /** Constructor */
  CUP$GeneradorCup$actions(GeneradorCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GeneradorCup$do_action(
    int                        CUP$GeneradorCup$act_num,
    java_cup.runtime.lr_parser CUP$GeneradorCup$parser,
    java.util.Stack            CUP$GeneradorCup$stack,
    int                        CUP$GeneradorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeneradorCup$result;

      /* select the action based on the action number */
      switch (CUP$GeneradorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LLAM_F1 ::= VAL COMA LLAM_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LLAM_F1 ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LLAM_F1 ::= ID COMA LLAM_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LLAM_F1 ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAM_F ::= ID PAR_AB PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LLAM_F ::= ID PAR_AB LLAM_F1 PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COMP2 ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COMP2 ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COMP1 ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COMP1 ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COMP ::= COMP1 OP_COMP COMP2 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP",35, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR_F1 ::= COMP 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR_F1 ::= EXPR_F1 OP_COMP_L COMP 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR_F ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR_F ::= EXPR_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // C_FLUJO_WHILE ::= WHILE PAR_AB EXPR_F PAR_CER DO BLOQUE1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_WHILE",31, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // C_FLUJO_DOWHILE ::= DO BLOQUE1 WHILE PAR_AB EXPR_F PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_DOWHILE",32, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // C_FLUJO_ELSE ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // C_FLUJO_ELSE ::= ELSE BLOQUE1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // C_FLUJO_IF ::= IF PAR_AB EXPR_F PAR_CER THEN BLOQUE1 C_FLUJO_ELSE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_IF",29, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPR_RTN1 ::= VAL END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPR_RTN1 ::= ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPR_RTN ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPR_RTN ::= RETURN OPR_RTN1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPR_OUT ::= OUTPUT CADENA END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_OUT",26, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPR_IN ::= INPUT ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_IN",25, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VAL ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VAL ::= CARACTER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAL ::= ENTERO 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VAL ::= CADENA 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_BINARIO ::= POR DIV 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_BINARIO",41, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_BINARIO ::= MENOS 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_BINARIO",41, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_BINARIO ::= MAS 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_BINARIO",41, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_UNARIO ::= OP_UNARIO_MENOS 
            {
              Object RESULT =null;
		op_un=GeneradorSym.OP_UNARIO_MENOS;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",40, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_UNARIO ::= OP_UNARIO_MAS 
            {
              Object RESULT =null;
		op_un=GeneradorSym.OP_UNARIO_MAS;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OP_UNARIO",40, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // F ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // F ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // F ::= PAR_AB E PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= F 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E OP_BINARIO F 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= ID OP_UNARIO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		op_unario2(r);r1=r;op_unario();
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIBUCIONES1 ::= IGUAL EXPRESION END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATRIBUCIONES1 ::= OP_UNARIO NT$5 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$5 ::= 
            {
              Object RESULT =null;
op_unario();
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$5",47, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUCIONES ::= ID NT$4 COR_AB ENTERO COR_CER ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$4 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
r1=r;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$4",46, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUCIONES ::= ID NT$3 ATRIBUCIONES1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$3 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.peek()).value;
r1=r;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$3",45, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMANDOS1 ::= error LLAV_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMANDOS1 ::= error END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMANDOS1 ::= LLAM_F 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMANDOS1 ::= C_FLUJO_DOWHILE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMANDOS1 ::= C_FLUJO_WHILE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMANDOS1 ::= C_FLUJO_IF 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMANDOS1 ::= OPR_OUT 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMANDOS1 ::= OPR_IN 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMANDOS1 ::= ATRIBUCIONES 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMANDOS ::= COMANDOS1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMANDOS ::= COMANDOS COMANDOS1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DEC_L2 ::= ID COMA NT$2 DEC_L2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$2",44, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DEC_L2 ::= ID END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_L1 ::= TIPO DOSPUN DEC_L2 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L1",15, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC_L ::= DEC_L1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC_L ::= DEC_L DEC_L1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BLOQUE1 ::= LLAV_AB LLAV_CER 
            {
              Object RESULT =null;
		 escribir(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BLOQUE1 ::= LLAV_AB COMANDOS LLAV_CER 
            {
              Object RESULT =null;
		 escribir(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE ::= BLOQUE1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE ::= LLAV_AB DEC_L COMANDOS OPR_RTN LLAV_CER 
            {
              Object RESULT =null;
		 escribir(); 
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ENCAB1 ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ENCAB1 ::= COMA TIPO DOSPUN ID ENCAB1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENCAB ::= TIPO DOSPUN ID ENCAB1 PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENCAB ::= PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNC ::= VOID DOSPUN ID PAR_AB ENCAB 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNC ::= TIPO DOSPUN ID PAR_AB ENCAB 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCION ::= FUNC BLOQUE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES ::= error 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= STRING 
            {
              Object RESULT =null;
		tipo=GeneradorSym.STRING;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= BOOL 
            {
              Object RESULT =null;
		tipo=GeneradorSym.BOOL;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		tipo=GeneradorSym.CHAR;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= FLOAT 
            {
              Object RESULT =null;
		tipo=GeneradorSym.FLOAT;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= INT 
            {
              Object RESULT =null;
		tipo=GeneradorSym.INT;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DEC_V1 ::= ID COR_AB ENTERO COR_CER COMA NT$1 DEC_V1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).value;
declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$1",43, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC_V1 ::= ID COR_AB ENTERO COR_CER END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)).value;
		declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_V ::= TIPO DOSPUN DEC_V1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V",6, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_G1 ::= ID COMA NT$0 DEC_G1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)).value;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("NT$0",42, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC_G1 ::= ID END 
            {
              Object RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		String r1 = (String)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		declarar(r1);
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC_G ::= TIPO DOSPUN DEC_G1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G",4, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= error END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DEC_V 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACIONES DEC_V 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DEC_G 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES ::= DECLARACIONES DEC_G 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		RESULT = start_val;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeneradorCup$parser.done_parsing();
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

