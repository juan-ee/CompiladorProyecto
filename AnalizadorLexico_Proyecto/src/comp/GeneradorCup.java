
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 15 23:10:01 GMT-05:00 2016
//----------------------------------------------------

package comp;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 15 23:10:01 GMT-05:00 2016
  */
public class GeneradorCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GeneradorCup() {super();}

  /** Constructor which sets the default scanner. */
  public GeneradorCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public GeneradorCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\006\005\000\002\007\004\000" +
    "\002\007\005\000\002\010\005\000\002\011\007\000\002" +
    "\011\010\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\012\004\000" +
    "\002\013\007\000\002\013\007\000\002\014\003\000\002" +
    "\014\007\000\002\015\007\000\002\015\002\000\002\016" +
    "\007\000\002\016\003\000\002\017\005\000\002\017\004" +
    "\000\002\020\004\000\002\020\003\000\002\021\005\000" +
    "\002\022\004\000\002\022\005\000\002\023\004\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\004\000\002\024\004\000" +
    "\002\025\004\000\002\025\007\000\002\026\004\000\002" +
    "\026\005\000\002\027\004\000\002\027\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\005\000\002\034\005\000\002\035\004\000\002\035" +
    "\002\000\002\036\004\000\002\036\004\000\002\037\011" +
    "\000\002\040\004\000\002\040\002\000\002\042\011\000" +
    "\002\041\010\000\002\043\003\000\002\043\003\000\002" +
    "\044\005\000\002\044\003\000\002\045\005\000\002\046" +
    "\003\000\002\046\003\000\002\047\003\000\002\047\003" +
    "\000\002\050\007\000\002\050\006\000\002\051\003\000" +
    "\002\051\005\000\002\051\003\000\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\016\003\012\041\015\042\004\043\016\044" +
    "\010\045\006\001\002\000\004\037\ufff4\001\002\000\004" +
    "\002\263\001\002\000\004\037\ufff1\001\002\000\020\003" +
    "\044\041\015\042\004\043\016\044\010\045\006\046\041" +
    "\001\002\000\004\037\ufff0\001\002\000\020\003\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002" +
    "\000\004\040\036\001\002\000\004\037\017\001\002\000" +
    "\020\003\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\001\002\000\004\037\ufff2\001\002\000\004\037" +
    "\ufff3\001\002\000\004\035\021\001\002\000\020\003\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\001" +
    "\002\000\010\011\025\036\023\040\024\001\002\000\020" +
    "\003\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\001\002\000\004\035\035\001\002\000\020\003\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\001" +
    "\002\000\004\021\026\001\002\000\004\012\027\001\002" +
    "\000\006\036\030\040\031\001\002\000\004\035\032\001" +
    "\002\000\020\003\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\001\002\000\004\011\025\001\002\000" +
    "\020\003\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\001\002\000\020\003\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002\000\006\036\023" +
    "\040\024\001\002\000\020\003\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\001\002\000\004\007\100" +
    "\001\002\000\020\002\001\041\015\042\004\043\016\044" +
    "\010\045\006\046\041\001\002\000\004\037\066\001\002" +
    "\000\020\003\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045" +
    "\uffff\046\uffff\001\002\000\004\037\047\001\002\000\020" +
    "\002\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\001\002\000\020\003\ufffd\041\ufffd\042\ufffd\043\ufffd" +
    "\044\ufffd\045\ufffd\046\ufffd\001\002\000\020\002\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\001\002" +
    "\000\004\035\050\001\002\000\012\005\051\011\025\036" +
    "\023\040\024\001\002\000\016\006\052\041\015\042\004" +
    "\043\016\044\010\045\006\001\002\000\004\007\uffe9\001" +
    "\002\000\004\007\uffeb\001\002\000\004\037\055\001\002" +
    "\000\004\035\056\001\002\000\006\006\uffe6\036\057\001" +
    "\002\000\014\041\015\042\004\043\016\044\010\045\006" +
    "\001\002\000\004\006\061\001\002\000\004\007\uffe8\001" +
    "\002\000\004\037\063\001\002\000\004\035\064\001\002" +
    "\000\006\006\uffe6\036\057\001\002\000\004\006\uffe7\001" +
    "\002\000\004\035\067\001\002\000\004\005\070\001\002" +
    "\000\016\006\052\041\015\042\004\043\016\044\010\045" +
    "\006\001\002\000\004\007\uffea\001\002\000\004\037\074" +
    "\001\002\000\020\002\uffef\041\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\001\002\000\004\035\075\001\002" +
    "\000\004\005\051\001\002\000\020\002\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\001\002\000\020" +
    "\002\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\001\002\000\034\003\121\010\123\025\113\030\107" +
    "\031\116\032\103\033\124\035\114\041\015\042\004\043" +
    "\016\044\010\045\006\001\002\000\032\003\121\025\113" +
    "\030\107\031\116\032\103\033\124\035\114\041\015\042" +
    "\004\043\016\044\010\045\006\001\002\000\024\003\uffda" +
    "\010\uffda\025\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\001\002\000\004\035\247\001\002\000\022" +
    "\003\121\010\245\025\113\030\107\031\116\032\103\033" +
    "\124\035\114\001\002\000\024\003\uffdb\010\uffdb\025\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\001" +
    "\002\000\024\003\uffd4\010\uffd4\025\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\001\002\000\004\005" +
    "\240\001\002\000\024\003\uffd8\010\uffd8\025\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\001\002\000" +
    "\024\003\uffd7\010\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\001\002\000\024\003\uffd5\010" +
    "\uffd5\025\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\001\002\000\004\005\230\001\002\000\012\005" +
    "\170\011\173\013\171\014\167\001\002\000\004\037\161" +
    "\001\002\000\004\007\132\001\002\000\032\003\uffe0\025" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\035\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\001\002\000\024\003" +
    "\uffd6\010\uffd6\025\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\001\002\000\006\010\127\040\130\001" +
    "\002\000\024\003\uffd9\010\uffd9\025\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\001\002\000\044\002" +
    "\uffe2\003\uffe2\010\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\004\023\125" +
    "\001\002\000\004\040\126\001\002\000\024\003\uffc0\010" +
    "\uffc0\025\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\001\002\000\024\003\uffd2\010\uffd2\025\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\001\002" +
    "\000\024\003\uffd3\010\uffd3\025\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000\004\030\133" +
    "\001\002\000\022\003\121\010\123\025\113\030\107\031" +
    "\116\032\103\033\124\035\114\001\002\000\004\005\134" +
    "\001\002\000\016\020\147\021\141\022\143\023\135\024" +
    "\137\035\145\001\002\000\016\006\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\036\uffc6\040\uffc6\001\002\000\006\006\uffb6\017" +
    "\156\001\002\000\016\006\uffc2\015\uffc2\016\uffc2\017\uffc2" +
    "\036\uffc2\040\uffc2\001\002\000\004\006\154\001\002\000" +
    "\016\006\uffc5\015\uffc5\016\uffc5\017\uffc5\036\uffc5\040\uffc5" +
    "\001\002\000\004\016\150\001\002\000\016\006\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\036\uffc4\040\uffc4\001\002\000\006" +
    "\006\uffb3\017\uffb3\001\002\000\006\006\uffb5\016\uffb1\001" +
    "\002\000\004\016\uffb0\001\002\000\016\006\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\036\uffc3\040\uffc3\001\002\000\016\020" +
    "\147\021\141\022\143\023\135\024\137\035\151\001\002" +
    "\000\006\006\uffaf\017\uffaf\001\002\000\006\006\uffae\017" +
    "\uffae\001\002\000\006\006\uffb2\017\uffb2\001\002\000\004" +
    "\040\155\001\002\000\024\003\uffb8\010\uffb8\025\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\001\002" +
    "\000\016\020\147\021\141\022\143\023\135\024\137\035" +
    "\160\001\002\000\006\006\uffb4\017\uffb4\001\002\000\004" +
    "\016\uffb1\001\002\000\004\035\162\001\002\000\006\036" +
    "\164\040\165\001\002\000\032\003\uffdf\025\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\035\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\001\002\000\004\035\162\001\002" +
    "\000\032\003\uffde\025\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\035\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\001\002\000\032\003\uffdd\025\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\035\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\001\002\000\004\040\227\001\002\000\020\006" +
    "\214\020\147\021\141\022\143\023\135\024\137\035\215" +
    "\001\002\000\020\005\200\020\147\021\141\022\143\023" +
    "\135\024\137\035\177\001\002\000\024\003\uffd1\010\uffd1" +
    "\025\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\001\002\000\004\021\174\001\002\000\004\012\175" +
    "\001\002\000\006\013\171\014\167\001\002\000\024\003" +
    "\uffd0\010\uffd0\025\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\001\002\000\010\014\213\015\uffc8\040" +
    "\uffc8\001\002\000\020\005\200\020\147\021\141\022\143" +
    "\023\135\024\137\035\206\001\002\000\010\006\uffc7\015" +
    "\uffc7\040\uffc7\001\002\000\004\040\210\001\002\000\010" +
    "\006\uffca\015\uffca\040\uffca\001\002\000\006\015\205\040" +
    "\uffcc\001\002\000\020\005\200\020\147\021\141\022\143" +
    "\023\135\024\137\035\206\001\002\000\010\006\uffc8\015" +
    "\uffc8\040\uffc8\001\002\000\010\006\uffcb\015\uffcb\040\uffcb" +
    "\001\002\000\024\003\uffce\010\uffce\025\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\001\002\000\006" +
    "\006\212\015\205\001\002\000\010\006\uffc9\015\uffc9\040" +
    "\uffc9\001\002\000\004\040\uffcd\001\002\000\004\040\226" +
    "\001\002\000\006\006\uffab\036\224\001\002\000\006\006" +
    "\uffa9\036\222\001\002\000\004\006\220\001\002\000\004" +
    "\040\221\001\002\000\024\003\uffad\010\uffad\025\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\001\002" +
    "\000\016\020\147\021\141\022\143\023\135\024\137\035" +
    "\215\001\002\000\004\006\uffa8\001\002\000\016\020\147" +
    "\021\141\022\143\023\135\024\137\035\215\001\002\000" +
    "\004\006\uffaa\001\002\000\024\003\uffac\010\uffac\025\uffac" +
    "\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\001" +
    "\002\000\024\003\uffcf\010\uffcf\025\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\001\002\000\016\020" +
    "\147\021\141\022\143\023\135\024\137\035\145\001\002" +
    "\000\004\006\232\001\002\000\004\027\233\001\002\000" +
    "\004\007\132\001\002\000\026\003\uffb9\010\uffb9\025\uffb9" +
    "\026\235\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\001\002\000\004\007\132\001\002\000\024\003\uffbb" +
    "\010\uffbb\025\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\001\002\000\024\003\uffba\010\uffba\025\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\001" +
    "\002\000\016\020\147\021\141\022\143\023\135\024\137" +
    "\035\145\001\002\000\004\006\242\001\002\000\004\031" +
    "\243\001\002\000\004\007\132\001\002\000\024\003\uffb7" +
    "\010\uffb7\025\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\001\002\000\044\002\uffe3\003\uffe3\010\uffe3" +
    "\025\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\001\002\000\024\003\uffdc\010\uffdc\025\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\001\002" +
    "\000\004\040\250\001\002\000\024\003\uffc1\010\uffc1\025" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\001\002\000\024\003\121\010\uffbe\025\113\030\107\031" +
    "\116\032\103\033\124\034\254\035\114\001\002\000\032" +
    "\003\uffe1\025\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\001\002" +
    "\000\004\010\262\001\002\000\016\020\147\021\141\022" +
    "\143\023\135\024\137\035\255\001\002\000\004\040\261" +
    "\001\002\000\004\010\uffbf\001\002\000\004\040\260\001" +
    "\002\000\004\010\uffbc\001\002\000\004\010\uffbd\001\002" +
    "\000\020\002\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\014\002\004\003\006\005\012\006\010\010" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\037\005\042\006\041\010\044\012" +
    "\045\013\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\017\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\076\017\075\001\001\000\010\005\071" +
    "\012\072\013\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\017\011\021\001\001\000" +
    "\002\001\001\000\006\005\053\014\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\057\001\001\000\004\005\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\053\014" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\114\020\100\021\116" +
    "\023\103\024\104\025\101\033\121\034\107\037\110\041" +
    "\117\042\111\050\105\001\001\000\030\005\114\021\251" +
    "\023\250\024\104\025\101\033\121\034\107\037\110\041" +
    "\117\042\111\050\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\245\025\101\033\121\034\107\037" +
    "\110\041\117\042\111\050\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\171\001\001\000\002\001\001\000\004\017\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\023\103\024\104\025" +
    "\101\033\121\034\107\037\110\041\117\042\111\050\105" +
    "\001\001\000\002\001\001\000\014\032\145\043\137\044" +
    "\135\045\143\046\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\151\047\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\145\045\156\046\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\215\051\216\001\001\000\012\027\201\030\203" +
    "\031\202\032\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\210\031\202\032" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\206\032\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\215\051\222\001\001\000\002\001\001\000\006\032\215" +
    "\051\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\032\145\043\230\044\135\045\143" +
    "\046\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\233\001\001\000\004\040\235\001\001\000\004" +
    "\017\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\032\145\043\240\044\135\045\143\046\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\024\245\025" +
    "\101\033\121\034\107\035\252\037\110\041\117\042\111" +
    "\050\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\256\036\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeneradorCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeneradorCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeneradorCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



int errores=0;

public void syntax_error( Symbol s ){
	System.out.println("ERROR SINTACTICO. Linea: " + s.left+", columna: " + s.right );
	errores++;
}

public void unrecovered_syntax_error( Symbol s ) throws java.lang.Exception{
	System.out.println("ERROR SINTACTICO. El sistema no se pudo recuperar, linea");
	errores++;
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GeneradorCup$actions {


	

  private final GeneradorCup parser;

  /** Constructor */
  CUP$GeneradorCup$actions(GeneradorCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GeneradorCup$do_action(
    int                        CUP$GeneradorCup$act_num,
    java_cup.runtime.lr_parser CUP$GeneradorCup$parser,
    java.util.Stack            CUP$GeneradorCup$stack,
    int                        CUP$GeneradorCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeneradorCup$result;

      /* select the action based on the action number */
      switch (CUP$GeneradorCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LLAM_F1 ::= VAL COMA LLAM_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LLAM_F1 ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LLAM_F1 ::= ID COMA LLAM_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LLAM_F1 ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F1",39, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LLAM_F ::= ID PAR_AB PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-3)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LLAM_F ::= ID PAR_AB LLAM_F1 PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("LLAM_F",38, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // COMP2 ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // COMP2 ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP2",37, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // COMP1 ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COMP1 ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP1",36, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COMP ::= COMP1 OP_COMP COMP2 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMP",35, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPR_F1 ::= COMP 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPR_F1 ::= EXPR_F1 OP_COMP_L COMP 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F1",34, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPR_F ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPR_F ::= EXPR_F1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPR_F",33, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // C_FLUJO_WHILE ::= WHILE PAR_AB EXPR_F PAR_CER DO BLOQUE1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_WHILE",31, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // C_FLUJO_DOWHILE ::= DO BLOQUE1 WHILE PAR_AB EXPR_F PAR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_DOWHILE",32, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // C_FLUJO_ELSE ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // C_FLUJO_ELSE ::= ELSE BLOQUE1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_ELSE",30, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // C_FLUJO_IF ::= IF PAR_AB EXPR_F PAR_CER THEN BLOQUE1 C_FLUJO_ELSE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("C_FLUJO_IF",29, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-6)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPR_RTN1 ::= VAL END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPR_RTN1 ::= ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN1",28, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPR_RTN ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPR_RTN ::= RETURN OPR_RTN1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_RTN",27, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPR_OUT ::= OUTPUT CADENA END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_OUT",26, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPR_IN ::= INPUT ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("OPR_IN",25, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAL ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VAL ::= CARACTER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAL ::= ENTERO 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAL ::= CADENA 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("VAL",24, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // F ::= VAL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // F ::= ID 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // F ::= PAR_AB E PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("F",23, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= F 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E OP_BINARIO F 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= E 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= ID OP_UNARIO 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("EXPRESION",21, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIBUCIONES1 ::= IGUAL EXPRESION END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ATRIBUCIONES1 ::= OP_UNARIO END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES1",20, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATRIBUCIONES ::= ID COR_AB ENTERO COR_CER ATRIBUCIONES1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ATRIBUCIONES ::= ID ATRIBUCIONES1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ATRIBUCIONES",19, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMANDOS1 ::= error LLAV_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // COMANDOS1 ::= error END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // COMANDOS1 ::= LLAM_F 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // COMANDOS1 ::= C_FLUJO_DOWHILE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // COMANDOS1 ::= C_FLUJO_WHILE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // COMANDOS1 ::= C_FLUJO_IF 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // COMANDOS1 ::= OPR_OUT 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMANDOS1 ::= OPR_IN 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMANDOS1 ::= ATRIBUCIONES 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS1",18, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // COMANDOS ::= COMANDOS1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // COMANDOS ::= COMANDOS COMANDOS1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("COMANDOS",17, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEC_L2 ::= ID COMA DEC_L2 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DEC_L2 ::= ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L2",16, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEC_L1 ::= TIPO DOSPUN DEC_L2 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L1",15, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEC_L ::= DEC_L1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEC_L ::= DEC_L DEC_L1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_L",14, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BLOQUE1 ::= LLAV_AB LLAV_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BLOQUE1 ::= LLAV_AB COMANDOS LLAV_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE1",13, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BLOQUE ::= BLOQUE1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BLOQUE ::= LLAV_AB DEC_L COMANDOS OPR_RTN LLAV_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("BLOQUE",12, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ENCAB1 ::= 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENCAB1 ::= COMA TIPO DOSPUN ID ENCAB1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB1",11, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ENCAB ::= TIPO DOSPUN ID ENCAB1 PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ENCAB ::= PAR_CER 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("ENCAB",10, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNC ::= VOID DOSPUN ID PAR_AB ENCAB 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNC ::= TIPO DOSPUN ID PAR_AB ENCAB 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNC",9, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= FUNC BLOQUE 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCION",8, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCIONES ::= error 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("FUNCIONES",2, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= STRING 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= BOOL 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPO ::= CHAR 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPO ::= FLOAT 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO ::= INT 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEC_V1 ::= ID COR_AB ENTERO COR_CER COMA DEC_V1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-5)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEC_V1 ::= ID COR_AB ENTERO COR_CER END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V1",7, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-4)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEC_V ::= TIPO DOSPUN DEC_V1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_V",6, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEC_G1 ::= ID COMA DEC_G1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DEC_G1 ::= ID END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G1",5, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DEC_G ::= TIPO DOSPUN DEC_G1 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DEC_G",4, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-2)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACIONES ::= error END 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACIONES ::= DEC_V 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACIONES DEC_V 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DEC_G 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACIONES ::= DECLARACIONES DEC_G 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)).value;
		RESULT = start_val;
              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$GeneradorCup$parser.done_parsing();
          return CUP$GeneradorCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= DECLARACIONES FUNCIONES 
            {
              Object RESULT =null;

              CUP$GeneradorCup$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.elementAt(CUP$GeneradorCup$top-1)), ((java_cup.runtime.Symbol)CUP$GeneradorCup$stack.peek()), RESULT);
            }
          return CUP$GeneradorCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

